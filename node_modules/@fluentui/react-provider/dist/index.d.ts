import { ComponentProps } from '@fluentui/react-utilities';
import type { ComponentState } from '@fluentui/react-utilities';
import { CustomStyleHooksContextValue_unstable } from '@fluentui/react-shared-contexts';
import { OverridesContextValue_unstable } from '@fluentui/react-shared-contexts';
import type { PartialTheme } from '@fluentui/react-theme';
import type { ProviderContextValue_unstable } from '@fluentui/react-shared-contexts';
import * as React_2 from 'react';
import type { Slot } from '@fluentui/react-utilities';
import { SlotClassNames } from '@fluentui/react-utilities';
import { Theme } from '@fluentui/tokens';
import type { ThemeClassNameContextValue_unstable } from '@fluentui/react-shared-contexts';
import type { ThemeContextValue_unstable } from '@fluentui/react-shared-contexts';
import type { TooltipVisibilityContextValue_unstable } from '@fluentui/react-shared-contexts';

export declare const FluentProvider: React_2.ForwardRefExoticComponent<Omit<ComponentProps<FluentProviderSlots, "root">, "dir"> & {
    applyStylesToPortals?: boolean | undefined;
    customStyleHooks_unstable?: Partial<CustomStyleHooksContextValue_unstable> | undefined;
    dir?: "ltr" | "rtl" | undefined;
    targetDocument?: Document | undefined;
    theme?: Partial<Theme> | undefined;
    overrides_unstable?: OverridesContextValue_unstable | undefined;
} & React_2.RefAttributes<HTMLElement>>;

export declare const fluentProviderClassNames: SlotClassNames<FluentProviderSlots>;

export declare type FluentProviderContextValues = Pick<FluentProviderState, 'customStyleHooks_unstable' | 'theme' | 'overrides_unstable'> & {
    provider: ProviderContextValue_unstable;
    themeClassName: ThemeClassNameContextValue_unstable;
    textDirection: 'ltr' | 'rtl';
    tooltip: TooltipVisibilityContextValue_unstable;
};

export declare type FluentProviderCustomStyleHooks = Partial<CustomStyleHooksContextValue_unstable>;

export declare type FluentProviderProps = Omit<ComponentProps<FluentProviderSlots>, 'dir'> & {
    /**
     * Passes styles applied to a component down to portals if enabled.
     * @default true
     */
    applyStylesToPortals?: boolean;
    /** Sets the hooks for custom styling components. */
    customStyleHooks_unstable?: FluentProviderCustomStyleHooks;
    /** Sets the direction of text & generated styles. */
    dir?: 'ltr' | 'rtl';
    /** Provides the document, can be undefined during SSR render. */
    targetDocument?: Document;
    /** Sets the theme used in a scope. */
    theme?: PartialTheme;
    overrides_unstable?: OverridesContextValue_unstable;
};

export declare type FluentProviderSlots = {
    root: Slot<'div'>;
};

export declare type FluentProviderState = ComponentState<FluentProviderSlots> & Pick<FluentProviderProps, 'targetDocument'> & Required<Pick<FluentProviderProps, 'applyStylesToPortals' | 'customStyleHooks_unstable' | 'dir' | 'overrides_unstable'>> & {
    theme: ThemeContextValue_unstable;
    themeClassName: string;
    /**
     * Props used to render SSR theme variables style element
     */
    serverStyleProps: {
        /**
         * CSS rule containing CSS variables
         */
        cssRule: string;
        /**
         * Additional attributes applied to the style element
         */
        attributes: Record<string, string>;
    };
};

/**
 * Render the final JSX of FluentProvider
 */
export declare const renderFluentProvider_unstable: (state: FluentProviderState, contextValues: FluentProviderContextValues) => JSX.Element;

/**
 * Create the state required to render FluentProvider.
 *
 * The returned state can be modified with hooks such as useFluentProviderStyles_unstable,
 * before being passed to renderFluentProvider_unstable.
 *
 * @param props - props from this instance of FluentProvider
 * @param ref - reference to root HTMLElement of FluentProvider
 */
export declare const useFluentProvider_unstable: (props: FluentProviderProps, ref: React_2.Ref<HTMLElement>) => FluentProviderState;

export declare function useFluentProviderContextValues_unstable(state: FluentProviderState): FluentProviderContextValues;

/** Applies style classnames to slots */
export declare const useFluentProviderStyles_unstable: (state: FluentProviderState) => FluentProviderState;

/**
 * Writes a theme as css variables in a style tag on the provided targetDocument as a rule applied to a CSS class
 * @internal
 * @returns CSS class to apply the rule
 */
export declare const useFluentProviderThemeStyleTag: (options: Pick<FluentProviderState, 'theme' | 'targetDocument'> & {
    rendererAttributes: Record<string, string>;
}) => {
    styleTagId: string;
    rule: string;
};

export { }
