import * as React from 'react';
import { TextDirectionProvider } from '@griffel/react';
import { OverridesProvider_unstable as OverridesProvider, Provider_unstable as Provider, TooltipVisibilityProvider_unstable as TooltipVisibilityProvider, ThemeProvider_unstable as ThemeProvider, ThemeClassNameProvider_unstable as ThemeClassNameProvider, CustomStyleHooksProvider_unstable as CustomStyleHooksProvider } from '@fluentui/react-shared-contexts';
import { canUseDOM, getSlots } from '@fluentui/react-utilities';
/**
 * Render the final JSX of FluentProvider
 */
export const renderFluentProvider_unstable = (state, contextValues) => {
  const {
    slots,
    slotProps
  } = getSlots(state);
  // Typescript (vscode) incorrectly references the FluentProviderProps.customStyleHooks_unstable
  // instead of FluentProviderContextValues.customStyleHooks_unstable and thinks it is
  // Partial<CustomStyleHooksContextValue>, so it needs to be cast to Required<CustomStyleHooksContextValue>
  return /*#__PURE__*/React.createElement(Provider, {
    value: contextValues.provider
  }, /*#__PURE__*/React.createElement(ThemeProvider, {
    value: contextValues.theme
  }, /*#__PURE__*/React.createElement(ThemeClassNameProvider, {
    value: contextValues.themeClassName
  }, /*#__PURE__*/React.createElement(CustomStyleHooksProvider, {
    value: contextValues.customStyleHooks_unstable
  }, /*#__PURE__*/React.createElement(TooltipVisibilityProvider, {
    value: contextValues.tooltip
  }, /*#__PURE__*/React.createElement(TextDirectionProvider, {
    dir: contextValues.textDirection
  }, /*#__PURE__*/React.createElement(OverridesProvider, {
    value: contextValues.overrides_unstable
  }, /*#__PURE__*/React.createElement(slots.root, slotProps.root, canUseDOM() ? null : /*#__PURE__*/React.createElement("style", {
    // Using dangerous HTML because react can escape characters
    // which can lead to invalid CSS.
    // eslint-disable-next-line react/no-danger
    dangerouslySetInnerHTML: {
      __html: state.serverStyleProps.cssRule
    },
    ...state.serverStyleProps.attributes
  }), slotProps.root.children))))))));
};
//# sourceMappingURL=renderFluentProvider.js.map