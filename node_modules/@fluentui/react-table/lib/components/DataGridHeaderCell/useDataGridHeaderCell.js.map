{"version":3,"names":["React","useEventCallback","useTableHeaderCell_unstable","useDataGridContext_unstable","useColumnIdContext","useTableContext","useDataGridHeaderCell_unstable","props","ref","columnId","sortable","toggleColumnSort","ctx","sort","sortDirection","getSortDirection","undefined","resizableColumns","columnSizing","columnSizing_unstable","onClick","e","_props_onClick","call","as","tabIndex","getTableHeaderCellProps"],"sources":["../../../src/components/DataGridHeaderCell/useDataGridHeaderCell.ts"],"sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '@fluentui/react-utilities';\nimport type { DataGridHeaderCellProps, DataGridHeaderCellState } from './DataGridHeaderCell.types';\nimport { useTableHeaderCell_unstable } from '../TableHeaderCell/useTableHeaderCell';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { useColumnIdContext } from '../../contexts/columnIdContext';\nimport { useTableContext } from '../../contexts/tableContext';\n\n/**\n * Create the state required to render DataGridHeaderCell.\n *\n * The returned state can be modified with hooks such as useDataGridHeaderCellStyles_unstable,\n * before being passed to renderDataGridHeaderCell_unstable.\n *\n * @param props - props from this instance of DataGridHeaderCell\n * @param ref - reference to root HTMLElement of DataGridHeaderCell\n */\nexport const useDataGridHeaderCell_unstable = (\n  props: DataGridHeaderCellProps,\n  ref: React.Ref<HTMLElement>,\n): DataGridHeaderCellState => {\n  const columnId = useColumnIdContext();\n  const { sortable } = useTableContext();\n  const toggleColumnSort = useDataGridContext_unstable(ctx => ctx.sort.toggleColumnSort);\n  const sortDirection = useDataGridContext_unstable(ctx =>\n    sortable ? ctx.sort.getSortDirection(columnId) : undefined,\n  );\n\n  const resizableColumns = useDataGridContext_unstable(ctx => ctx.resizableColumns);\n  const columnSizing = useDataGridContext_unstable(ctx => ctx.columnSizing_unstable);\n\n  const onClick = useEventCallback((e: React.MouseEvent<HTMLTableHeaderCellElement>) => {\n    if (sortable) {\n      toggleColumnSort(e, columnId);\n    }\n    props.onClick?.(e);\n  });\n\n  return useTableHeaderCell_unstable(\n    {\n      sortDirection,\n      as: 'div',\n      tabIndex: sortable ? undefined : 0,\n      ...(resizableColumns ? columnSizing.getTableHeaderCellProps(columnId) : {}),\n      ...props,\n      onClick,\n    },\n    ref,\n  );\n};\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,gBAAgB,QAAQ;AAEjC,SAASC,2BAA2B,QAAQ;AAC5C,SAASC,2BAA2B,QAAQ;AAC5C,SAASC,kBAAkB,QAAQ;AACnC,SAASC,eAAe,QAAQ;AAEhC;;;;;;;;;AASA,OAAO,MAAMC,8BAAA,GAAiCA,CAC5CC,KAAA,EACAC,GAAA,KAC4B;EAC5B,MAAMC,QAAA,GAAWL,kBAAA;EACjB,MAAM;IAAEM;EAAQ,CAAE,GAAGL,eAAA;EACrB,MAAMM,gBAAA,GAAmBR,2BAAA,CAA4BS,GAAA,IAAOA,GAAA,CAAIC,IAAI,CAACF,gBAAgB;EACrF,MAAMG,aAAA,GAAgBX,2BAAA,CAA4BS,GAAA,IAChDF,QAAA,GAAWE,GAAA,CAAIC,IAAI,CAACE,gBAAgB,CAACN,QAAA,IAAYO,SAAS;EAG5D,MAAMC,gBAAA,GAAmBd,2BAAA,CAA4BS,GAAA,IAAOA,GAAA,CAAIK,gBAAgB;EAChF,MAAMC,YAAA,GAAef,2BAAA,CAA4BS,GAAA,IAAOA,GAAA,CAAIO,qBAAqB;EAEjF,MAAMC,OAAA,GAAUnB,gBAAA,CAAkBoB,CAAA,IAAoD;QAIpFC,cAAA;IAHA,IAAIZ,QAAA,EAAU;MACZC,gBAAA,CAAiBU,CAAA,EAAGZ,QAAA;IACtB;IACA,CAAAa,cAAA,GAAAf,KAAA,CAAMa,OAAO,cAAbE,cAAA,uBAAAA,cAAA,CAAAC,IAAA,CAAAhB,KAAA,EAAgBc,CAAA;EAClB;EAEA,OAAOnB,2BAAA,CACL;IACEY,aAAA;IACAU,EAAA,EAAI;IACJC,QAAA,EAAUf,QAAA,GAAWM,SAAA,GAAY,CAAC;IAClC,IAAIC,gBAAA,GAAmBC,YAAA,CAAaQ,uBAAuB,CAACjB,QAAA,IAAY,CAAC,CAAC;IAC1E,GAAGF,KAAK;IACRa;EACF,GACAZ,GAAA;AAEJ"}