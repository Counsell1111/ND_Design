{"version":3,"names":["React","isInteractiveHTMLElement","useEventCallback","resolveShorthand","Space","useTableRow_unstable","useDataGridContext_unstable","DataGridSelectionCell","useTableRowIdContext","useIsInTableHeader","useDataGridRow_unstable","props","ref","rowId","isHeader","columnDefs","ctx","columns","selectable","selectableRows","selected","selection","isRowSelected","tabbable","focusMode","appearance","selectionAppearance","toggleRow","dataGridContextValue","onClick","e","_props_onClick","call","onKeyDown","_props_onKeyDown","key","target","preventDefault","baseState","undefined","children","as","tabIndex","components","selectionCell","required","renderCell"],"sources":["../../../src/components/DataGridRow/useDataGridRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { isInteractiveHTMLElement, useEventCallback, resolveShorthand } from '@fluentui/react-utilities';\nimport { Space } from '@fluentui/keyboard-keys';\nimport type { DataGridRowProps, DataGridRowState } from './DataGridRow.types';\nimport { useTableRow_unstable } from '../TableRow/useTableRow';\nimport { useDataGridContext_unstable } from '../../contexts/dataGridContext';\nimport { DataGridSelectionCell } from '../DataGridSelectionCell/DataGridSelectionCell';\nimport { useTableRowIdContext } from '../../contexts/rowIdContext';\nimport { useIsInTableHeader } from '../../contexts/tableHeaderContext';\n\n/**\n * Create the state required to render DataGridRow.\n *\n * The returned state can be modified with hooks such as useDataGridRowStyles_unstable,\n * before being passed to renderDataGridRow_unstable.\n *\n * @param props - props from this instance of DataGridRow\n * @param ref - reference to root HTMLElement of DataGridRow\n */\nexport const useDataGridRow_unstable = (props: DataGridRowProps, ref: React.Ref<HTMLElement>): DataGridRowState => {\n  const rowId = useTableRowIdContext();\n  const isHeader = useIsInTableHeader();\n  const columnDefs = useDataGridContext_unstable(ctx => ctx.columns);\n  const selectable = useDataGridContext_unstable(ctx => ctx.selectableRows);\n  const selected = useDataGridContext_unstable(ctx => ctx.selection.isRowSelected(rowId));\n  const tabbable = useDataGridContext_unstable(ctx => ctx.focusMode === 'row_unstable');\n  const appearance = useDataGridContext_unstable(ctx => {\n    if (!isHeader && selectable && ctx.selection.isRowSelected(rowId)) {\n      return ctx.selectionAppearance;\n    }\n\n    return 'none';\n  });\n  const toggleRow = useDataGridContext_unstable(ctx => ctx.selection.toggleRow);\n  const dataGridContextValue = useDataGridContext_unstable(ctx => ctx);\n\n  const onClick = useEventCallback((e: React.MouseEvent<HTMLTableRowElement>) => {\n    if (selectable && !isHeader) {\n      toggleRow(e, rowId);\n    }\n\n    props.onClick?.(e);\n  });\n\n  const onKeyDown = useEventCallback((e: React.KeyboardEvent<HTMLTableRowElement>) => {\n    if (selectable && !isHeader && e.key === Space && !isInteractiveHTMLElement(e.target as HTMLElement)) {\n      // stop scrolling\n      e.preventDefault();\n      toggleRow(e, rowId);\n    }\n\n    props.onKeyDown?.(e);\n  });\n\n  const baseState = useTableRow_unstable(\n    {\n      appearance,\n      'aria-selected': selectable ? selected : undefined,\n      ...props,\n      onClick,\n      onKeyDown,\n      children: null,\n      as: 'div',\n      tabIndex: tabbable && !isHeader ? 0 : undefined,\n    },\n    ref,\n  );\n\n  return {\n    ...baseState,\n    components: {\n      ...baseState.components,\n      selectionCell: DataGridSelectionCell,\n    },\n    selectionCell: resolveShorthand(props.selectionCell, { required: selectable }),\n    renderCell: props.children,\n    columnDefs,\n    dataGridContextValue,\n  };\n};\n"],"mappings":"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"}