{"version":3,"names":["React","useFluent_unstable","useFluent","getEventClientCoords","isMouseEvent","isTouchEvent","useTableColumnResizeMouseHandler","columnResizeState","mouseX","useRef","currentWidth","colId","undefined","targetDocument","globalWin","defaultView","recalculatePosition","useCallback","e","clientX","dx","current","setColumnWidth","columnId","width","onDrag","requestAnimationFrame","onDragEnd","event","removeEventListener","getOnMouseDown","getColumnWidth","target","currentTarget","button","addEventListener"],"sources":["../../src/hooks/useTableColumnResizeMouseHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport { TableColumnId, ColumnResizeState } from './types';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport {\n  NativeTouchOrMouseEvent,\n  ReactTouchOrMouseEvent,\n  getEventClientCoords,\n  isMouseEvent,\n  isTouchEvent,\n} from '@fluentui/react-utilities';\n\nexport function useTableColumnResizeMouseHandler(columnResizeState: ColumnResizeState) {\n  const mouseX = React.useRef(0);\n  const currentWidth = React.useRef(0);\n  const colId = React.useRef<TableColumnId | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n  const globalWin = targetDocument?.defaultView;\n\n  const recalculatePosition = React.useCallback(\n    (e: NativeTouchOrMouseEvent) => {\n      const { clientX } = getEventClientCoords(e);\n      const dx = clientX - mouseX.current;\n\n      // Update the local width for the column and set it\n      currentWidth.current += dx;\n      colId.current && columnResizeState.setColumnWidth(e, { columnId: colId.current, width: currentWidth.current });\n      mouseX.current = clientX;\n    },\n    [columnResizeState],\n  );\n\n  const onDrag = React.useCallback(\n    (e: NativeTouchOrMouseEvent) => {\n      // Using requestAnimationFrame here drastically improves resizing experience on slower CPUs\n      if (typeof globalWin?.requestAnimationFrame === 'function') {\n        requestAnimationFrame(() => recalculatePosition(e));\n      } else {\n        recalculatePosition(e);\n      }\n    },\n    [globalWin?.requestAnimationFrame, recalculatePosition],\n  );\n\n  const onDragEnd = React.useCallback(\n    (event: NativeTouchOrMouseEvent) => {\n      if (isMouseEvent(event)) {\n        targetDocument?.removeEventListener('mouseup', onDragEnd);\n        targetDocument?.removeEventListener('mousemove', onDrag);\n      }\n      if (isTouchEvent(event)) {\n        targetDocument?.removeEventListener('touchend', onDragEnd);\n        targetDocument?.removeEventListener('touchmove', onDrag);\n      }\n    },\n    [onDrag, targetDocument],\n  );\n\n  const getOnMouseDown = (columnId: TableColumnId) => (event: ReactTouchOrMouseEvent) => {\n    // Keep the width locally so that we decouple the calculation of the next with from rendering.\n    // This makes the whole experience much faster and more precise\n    currentWidth.current = columnResizeState.getColumnWidth(columnId);\n    mouseX.current = getEventClientCoords(event).clientX;\n    colId.current = columnId;\n\n    if (isMouseEvent(event)) {\n      // ignore other buttons than primary mouse button\n      if (event.target !== event.currentTarget || event.button !== 0) {\n        return;\n      }\n      targetDocument?.addEventListener('mouseup', onDragEnd);\n      targetDocument?.addEventListener('mousemove', onDrag);\n    }\n\n    if (isTouchEvent(event)) {\n      targetDocument?.addEventListener('touchend', onDragEnd);\n      targetDocument?.addEventListener('touchmove', onDrag);\n    }\n  };\n\n  return {\n    getOnMouseDown: (columnId: TableColumnId) => getOnMouseDown(columnId),\n  };\n}\n"],"mappings":"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"}