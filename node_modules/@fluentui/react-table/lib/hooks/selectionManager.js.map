{"version":3,"names":["React","createSelectionManager","mode","onSelectionChange","undefined","managerFactory","createMultipleSelectionManager","createSingleSelectionManager","toggleAllItems","e","itemIds","selectedItems","allItemsSelected","every","itemId","has","clear","forEach","add","Set","toggleItem","delete","selectItem","deselectItem","clearItems","isSelected","process","env","NODE_ENV","Error"],"sources":["../../src/hooks/selectionManager.ts"],"sourcesContent":["import * as React from 'react';\nimport { SelectionMode } from './types';\n\ntype OnSelectionChangeCallback = (e: React.SyntheticEvent, selectedItems: Set<SelectionItemId>) => void;\n\nexport interface SelectionManager {\n  toggleItem(e: React.SyntheticEvent, id: SelectionItemId, selectedItems: Set<SelectionItemId>): void;\n  selectItem(e: React.SyntheticEvent, id: SelectionItemId, selectedItems: Set<SelectionItemId>): void;\n  deselectItem(e: React.SyntheticEvent, id: SelectionItemId, selectedItems: Set<SelectionItemId>): void;\n  clearItems(e: React.SyntheticEvent): void;\n  isSelected(id: SelectionItemId, selectedItems: Set<SelectionItemId>): boolean;\n  toggleAllItems(e: React.SyntheticEvent, itemIds: SelectionItemId[], selectedItems: Set<SelectionItemId>): void;\n}\n\nexport type SelectionItemId = string | number;\n\nexport function createSelectionManager(\n  mode: SelectionMode,\n  onSelectionChange: OnSelectionChangeCallback = () => undefined,\n): SelectionManager {\n  const managerFactory = mode === 'multiselect' ? createMultipleSelectionManager : createSingleSelectionManager;\n\n  return managerFactory(onSelectionChange);\n}\n\nfunction createMultipleSelectionManager(onSelectionChange: OnSelectionChangeCallback): SelectionManager {\n  const toggleAllItems: SelectionManager['toggleAllItems'] = (e, itemIds, selectedItems) => {\n    const allItemsSelected = itemIds.every(itemId => selectedItems.has(itemId));\n\n    if (allItemsSelected) {\n      selectedItems.clear();\n    } else {\n      itemIds.forEach(itemId => selectedItems.add(itemId));\n    }\n\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const toggleItem: SelectionManager['toggleItem'] = (e, itemId, selectedItems) => {\n    if (selectedItems.has(itemId)) {\n      selectedItems.delete(itemId);\n    } else {\n      selectedItems.add(itemId);\n    }\n\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const selectItem: SelectionManager['selectItem'] = (e, itemId, selectedItems) => {\n    selectedItems.add(itemId);\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const deselectItem: SelectionManager['deselectItem'] = (e, itemId, selectedItems) => {\n    selectedItems.delete(itemId);\n    onSelectionChange(e, new Set(selectedItems));\n  };\n\n  const clearItems: SelectionManager['clearItems'] = e => {\n    onSelectionChange(e, new Set());\n  };\n\n  const isSelected = (itemId: SelectionItemId, selectedItems: Set<SelectionItemId>) => {\n    return selectedItems.has(itemId);\n  };\n\n  return {\n    toggleItem,\n    selectItem,\n    deselectItem,\n    clearItems,\n    isSelected,\n    toggleAllItems,\n  };\n}\n\nfunction createSingleSelectionManager(onSelectionChange: OnSelectionChangeCallback): SelectionManager {\n  const toggleItem: SelectionManager['toggleItem'] = (e, itemId) => {\n    onSelectionChange(e, new Set([itemId]));\n  };\n\n  const clearItems: SelectionManager['clearItems'] = e => {\n    onSelectionChange(e, new Set<SelectionItemId>());\n  };\n\n  const isSelected = (itemId: SelectionItemId, selectedItems: Set<SelectionItemId>) => {\n    return selectedItems.has(itemId);\n  };\n\n  const selectItem: SelectionManager['selectItem'] = (e, itemId) => {\n    onSelectionChange(e, new Set([itemId]));\n  };\n\n  return {\n    deselectItem: clearItems,\n    selectItem,\n    toggleAllItems: () => {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error('[react-table]: `toggleAllItems` should not be used in single selection mode');\n      }\n\n      return undefined;\n    },\n    toggleItem,\n    clearItems,\n    isSelected,\n  };\n}\n"],"mappings":"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"}