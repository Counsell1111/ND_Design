{"version":3,"names":["React","useControllableState","noop","undefined","defaultTableSortState","getSortDirection","setColumnSort","sort","rows","sortColumn","sortDirection","toggleColumnSort","useTableSort","options","tableState","useTableSortState","columns","sortState","defaultSortState","onSortChange","sorted","setSorted","initialState","defaultState","state","e","columnId","s","newState","nextSortColumn","nextSortDirection","slice","a","b","sortColumnDef","find","column","compare","mod","item"],"sources":["../../src/hooks/useTableSort.ts"],"sourcesContent":["import * as React from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport type {\n  TableColumnId,\n  TableRowData,\n  SortState,\n  TableSortState,\n  TableFeaturesState,\n  UseTableSortOptions,\n} from './types';\n\nconst noop = () => undefined;\n\nexport const defaultTableSortState: TableSortState<unknown> = {\n  getSortDirection: () => 'ascending',\n  setColumnSort: noop,\n  sort: <TRowState extends TableRowData<unknown>>(rows: TRowState[]) => [...rows],\n  sortColumn: undefined,\n  sortDirection: 'ascending',\n  toggleColumnSort: noop,\n};\n\nexport function useTableSort<TItem>(options: UseTableSortOptions) {\n  // False positive, these plugin hooks are intended to be run on every render\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return (tableState: TableFeaturesState<TItem>) => useTableSortState(tableState, options);\n}\n\nexport function useTableSortState<TItem>(\n  tableState: TableFeaturesState<TItem>,\n  options: UseTableSortOptions,\n): TableFeaturesState<TItem> {\n  const { columns } = tableState;\n  const { sortState, defaultSortState, onSortChange } = options;\n\n  const [sorted, setSorted] = useControllableState<SortState>({\n    initialState: {\n      sortDirection: 'ascending' as const,\n      sortColumn: undefined,\n    },\n    defaultState: defaultSortState,\n    state: sortState,\n  });\n\n  const { sortColumn, sortDirection } = sorted;\n\n  const toggleColumnSort = (e: React.SyntheticEvent, columnId: TableColumnId | undefined) => {\n    setSorted(s => {\n      const newState = { ...s, sortColumn: columnId };\n      if (s.sortColumn === columnId) {\n        newState.sortDirection = s.sortDirection === 'ascending' ? 'descending' : 'ascending';\n      } else {\n        newState.sortDirection = 'ascending';\n      }\n\n      onSortChange?.(e, newState);\n      return newState;\n    });\n  };\n\n  const setColumnSort: TableSortState<TItem>['setColumnSort'] = (e, nextSortColumn, nextSortDirection) => {\n    const newState = { sortColumn: nextSortColumn, sortDirection: nextSortDirection };\n    onSortChange?.(e, newState);\n    setSorted(newState);\n  };\n\n  const sort = <TRowState extends TableRowData<TItem>>(rows: TRowState[]) => {\n    return rows.slice().sort((a, b) => {\n      const sortColumnDef = columns.find(column => column.columnId === sortColumn);\n      if (!sortColumnDef?.compare) {\n        return 0;\n      }\n\n      const mod = sortDirection === 'ascending' ? 1 : -1;\n      return sortColumnDef.compare(a.item, b.item) * mod;\n    });\n  };\n\n  const getSortDirection: TableSortState<TItem>['getSortDirection'] = (columnId: TableColumnId) => {\n    return sortColumn === columnId ? sortDirection : undefined;\n  };\n\n  return {\n    ...tableState,\n    sort: {\n      sort,\n      sortColumn,\n      sortDirection,\n      setColumnSort,\n      toggleColumnSort,\n      getSortDirection,\n    },\n  };\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,oBAAoB,QAAQ;AAUrC,MAAMC,IAAA,GAAOA,CAAA,KAAMC,SAAA;AAEnB,OAAO,MAAMC,qBAAA,GAAiD;EAC5DC,gBAAA,EAAkBA,CAAA,KAAM;EACxBC,aAAA,EAAeJ,IAAA;EACfK,IAAA,EAAgDC,IAAA,IAAsB,C,GAAIA,IAAA,CAAK;EAC/EC,UAAA,EAAYN,SAAA;EACZO,aAAA,EAAe;EACfC,gBAAA,EAAkBT;AACpB;AAEA,OAAO,SAASU,aAAoBC,OAA4B,EAAE;EAChE;EACA;EACA,OAAQC,UAAA,IAA0CC,iBAAA,CAAkBD,UAAA,EAAYD,OAAA;AAClF;AAEA,OAAO,SAASE,kBACdD,UAAqC,EACrCD,OAA4B,EACD;EAC3B,MAAM;IAAEG;EAAO,CAAE,GAAGF,UAAA;EACpB,MAAM;IAAEG,SAAA;IAAWC,gBAAA;IAAkBC;EAAY,CAAE,GAAGN,OAAA;EAEtD,MAAM,CAACO,MAAA,EAAQC,SAAA,CAAU,GAAGpB,oBAAA,CAAgC;IAC1DqB,YAAA,EAAc;MACZZ,aAAA,EAAe;MACfD,UAAA,EAAYN;IACd;IACAoB,YAAA,EAAcL,gBAAA;IACdM,KAAA,EAAOP;EACT;EAEA,MAAM;IAAER,UAAA;IAAYC;EAAa,CAAE,GAAGU,MAAA;EAEtC,MAAMT,gBAAA,GAAmBA,CAACc,CAAA,EAAyBC,QAAA,KAAwC;IACzFL,SAAA,CAAUM,CAAA,IAAK;MACb,MAAMC,QAAA,GAAW;QAAE,GAAGD,CAAC;QAAElB,UAAA,EAAYiB;MAAS;MAC9C,IAAIC,CAAA,CAAElB,UAAU,KAAKiB,QAAA,EAAU;QAC7BE,QAAA,CAASlB,aAAa,GAAGiB,CAAA,CAAEjB,aAAa,KAAK,cAAc,eAAe,WAAW;MACvF,OAAO;QACLkB,QAAA,CAASlB,aAAa,GAAG;MAC3B;MAEAS,YAAA,aAAAA,YAAA,uBAAAA,YAAA,CAAeM,CAAA,EAAGG,QAAA;MAClB,OAAOA,QAAA;IACT;EACF;EAEA,MAAMtB,aAAA,GAAwDA,CAACmB,CAAA,EAAGI,cAAA,EAAgBC,iBAAA,KAAsB;IACtG,MAAMF,QAAA,GAAW;MAAEnB,UAAA,EAAYoB,cAAA;MAAgBnB,aAAA,EAAeoB;IAAkB;IAChFX,YAAA,aAAAA,YAAA,uBAAAA,YAAA,CAAeM,CAAA,EAAGG,QAAA;IAClBP,SAAA,CAAUO,QAAA;EACZ;EAEA,MAAMrB,IAAA,GAA+CC,IAAA,IAAsB;IACzE,OAAOA,IAAA,CAAKuB,KAAK,GAAGxB,IAAI,CAAC,CAACyB,CAAA,EAAGC,CAAA,KAAM;MACjC,MAAMC,aAAA,GAAgBlB,OAAA,CAAQmB,IAAI,CAACC,MAAA,IAAUA,MAAA,CAAOV,QAAQ,KAAKjB,UAAA;MACjE,IAAI,EAACyB,aAAA,aAAAA,aAAA,uBAAAA,aAAA,CAAeG,OAAO,CAAD,EAAG;QAC3B,OAAO;MACT;MAEA,MAAMC,GAAA,GAAM5B,aAAA,KAAkB,cAAc,IAAI,CAAC,CAAC;MAClD,OAAOwB,aAAA,CAAcG,OAAO,CAACL,CAAA,CAAEO,IAAI,EAAEN,CAAA,CAAEM,IAAI,IAAID,GAAA;IACjD;EACF;EAEA,MAAMjC,gBAAA,GAA+DqB,QAAA,IAA4B;IAC/F,OAAOjB,UAAA,KAAeiB,QAAA,GAAWhB,aAAA,GAAgBP,SAAS;EAC5D;EAEA,OAAO;IACL,GAAGW,UAAU;IACbP,IAAA,EAAM;MACJA,IAAA;MACAE,UAAA;MACAC,aAAA;MACAJ,aAAA;MACAK,gBAAA;MACAN;IACF;EACF;AACF"}