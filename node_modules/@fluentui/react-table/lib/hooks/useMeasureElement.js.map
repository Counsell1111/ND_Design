{"version":3,"names":["canUseDOM","React","useFluent_unstable","useFluent","useMeasureElement","width","setWidth","useState","container","useRef","undefined","targetDocument","handleResize","useCallback","_container_current","containerWidth","current","getBoundingClientRect","resizeObserver","ResizeObserver","measureElementRef","el","unobserve","remove","createElement","insertAdjacentElement","observe","useEffect","disconnect"],"sources":["../../src/hooks/useMeasureElement.ts"],"sourcesContent":["import { canUseDOM } from '@fluentui/react-utilities';\nimport * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\n\n/**\n * Provides a way of reporting element width.\n * Returns\n * `width` - current element width (0 by default),\n * `measureElementRef` - a ref function to be passed as `ref` to the element you want to measure\n */\nexport function useMeasureElement<TElement extends HTMLElement = HTMLElement>() {\n  const [width, setWidth] = React.useState(0);\n  const container = React.useRef<HTMLElement | undefined>(undefined);\n\n  const { targetDocument } = useFluent();\n\n  // the handler for resize observer\n  const handleResize = React.useCallback(() => {\n    const containerWidth = container.current?.getBoundingClientRect().width;\n    setWidth(containerWidth || 0);\n  }, []);\n\n  // Keep the reference of ResizeObserver in the state, as it should live through renders\n  const [resizeObserver] = React.useState(canUseDOM() ? new ResizeObserver(handleResize) : undefined);\n  const measureElementRef = React.useCallback(\n    (el: TElement | null) => {\n      if (!targetDocument || !resizeObserver) {\n        return;\n      }\n\n      // cleanup previous container\n      if (container.current) {\n        resizeObserver.unobserve(container.current);\n        container.current.remove();\n      }\n\n      if (el) {\n        container.current = targetDocument.createElement('div');\n        el.insertAdjacentElement('beforebegin', container.current);\n        resizeObserver.observe(container.current);\n        handleResize();\n      }\n    },\n    [targetDocument, resizeObserver, handleResize],\n  );\n\n  React.useEffect(() => {\n    return () => resizeObserver?.disconnect();\n  }, [resizeObserver]);\n\n  return { width, measureElementRef };\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ;AAC1B,YAAYC,KAAA,MAAW;AACvB,SAASC,kBAAA,IAAsBC,SAAS,QAAQ;AAEhD;;;;;;AAMA,OAAO,SAASC,kBAAA,EAAgE;EAC9E,MAAM,CAACC,KAAA,EAAOC,QAAA,CAAS,GAAGL,KAAA,CAAMM,QAAQ,CAAC;EACzC,MAAMC,SAAA,GAAYP,KAAA,CAAMQ,MAAM,CAA0BC,SAAA;EAExD,MAAM;IAAEC;EAAc,CAAE,GAAGR,SAAA;EAE3B;EACA,MAAMS,YAAA,GAAeX,KAAA,CAAMY,WAAW,CAAC,MAAM;QACpBC,kBAAA;IAAvB,MAAMC,cAAA,GAAiB,CAAAD,kBAAA,GAAAN,SAAA,CAAUQ,OAAO,cAAjBF,kBAAA,uBAAAA,kBAAA,CAAmBG,qBAAA,GAAwBZ,KAAK;IACvEC,QAAA,CAASS,cAAA,IAAkB;EAC7B,GAAG,EAAE;EAEL;EACA,MAAM,CAACG,cAAA,CAAe,GAAGjB,KAAA,CAAMM,QAAQ,CAACP,SAAA,KAAc,IAAImB,cAAA,CAAeP,YAAA,IAAgBF,SAAS;EAClG,MAAMU,iBAAA,GAAoBnB,KAAA,CAAMY,WAAW,CACxCQ,EAAA,IAAwB;IACvB,IAAI,CAACV,cAAA,IAAkB,CAACO,cAAA,EAAgB;MACtC;IACF;IAEA;IACA,IAAIV,SAAA,CAAUQ,OAAO,EAAE;MACrBE,cAAA,CAAeI,SAAS,CAACd,SAAA,CAAUQ,OAAO;MAC1CR,SAAA,CAAUQ,OAAO,CAACO,MAAM;IAC1B;IAEA,IAAIF,EAAA,EAAI;MACNb,SAAA,CAAUQ,OAAO,GAAGL,cAAA,CAAea,aAAa,CAAC;MACjDH,EAAA,CAAGI,qBAAqB,CAAC,eAAejB,SAAA,CAAUQ,OAAO;MACzDE,cAAA,CAAeQ,OAAO,CAAClB,SAAA,CAAUQ,OAAO;MACxCJ,YAAA;IACF;EACF,GACA,CAACD,cAAA,EAAgBO,cAAA,EAAgBN,YAAA,CAAa;EAGhDX,KAAA,CAAM0B,SAAS,CAAC,MAAM;IACpB,OAAO;MAAM,OAAAT,cAAA,aAAAA,cAAA,uBAAAA,cAAA,CAAgBU,UAAU;;EACzC,GAAG,CAACV,cAAA,CAAe;EAEnB,OAAO;IAAEb,KAAA;IAAOe;EAAkB;AACpC"}