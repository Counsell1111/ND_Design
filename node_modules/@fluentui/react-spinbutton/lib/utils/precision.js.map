{"version":3,"names":["calculatePrecision","value","groups","exec","String","length","precisionRound","precision","base","exp","Math","pow","round"],"sources":["../../src/utils/precision.ts"],"sourcesContent":["/**\n * Calculates a number's precision based on the number of trailing\n * zeros if the number does not have a decimal indicated by a negative\n * precision. Otherwise, it calculates the number of digits after\n * the decimal point indicated by a positive precision.\n * @param value - the value to determine the precision of\n */\nexport function calculatePrecision(value: number | string): number {\n  /**\n   * Group 1:\n   * [1-9]([0]+$) matches trailing zeros\n   * Group 2:\n   * \\.([0-9]*) matches all digits after a decimal point.\n   */\n  const groups = /[1-9]([0]+$)|\\.([0-9]*)/.exec(String(value));\n  if (!groups) {\n    return 0;\n  }\n  if (groups[1]) {\n    return -groups[1].length;\n  }\n  if (groups[2]) {\n    return groups[2].length;\n  }\n  return 0;\n}\n\n/**\n * Rounds a number to a certain level of precision. Accepts negative precision.\n * @param value - The value that is being rounded.\n * @param precision - The number of decimal places to round the number to\n */\nexport function precisionRound(value: number, precision: number, base: number = 10): number {\n  const exp = Math.pow(base, precision);\n  return Math.round(value * exp) / exp;\n}\n"],"mappings":"AAAA;;;;;;GAOA,OAAO,SAASA,mBAAmBC,KAAsB,EAAU;EACjE;;;;;;EAMA,MAAMC,MAAA,GAAS,0BAA0BC,IAAI,CAACC,MAAA,CAAOH,KAAA;EACrD,IAAI,CAACC,MAAA,EAAQ;IACX,OAAO;EACT;EACA,IAAIA,MAAM,CAAC,EAAE,EAAE;IACb,OAAO,CAACA,MAAM,CAAC,EAAE,CAACG,MAAM;EAC1B;EACA,IAAIH,MAAM,CAAC,EAAE,EAAE;IACb,OAAOA,MAAM,CAAC,EAAE,CAACG,MAAM;EACzB;EACA,OAAO;AACT;AAEA;;;;;AAKA,OAAO,SAASC,eAAeL,KAAa,EAAEM,SAAiB,EAAEC,IAAA,GAAe,EAAE,EAAU;EAC1F,MAAMC,GAAA,GAAMC,IAAA,CAAKC,GAAG,CAACH,IAAA,EAAMD,SAAA;EAC3B,OAAOG,IAAA,CAAKE,KAAK,CAACX,KAAA,GAAQQ,GAAA,IAAOA,GAAA;AACnC"}