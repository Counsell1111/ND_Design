{"version":3,"names":["React","useFieldControlProps_unstable","getPartitionedNativeProps","resolveShorthand","useControllableState","useEventCallback","useId","useIsomorphicLayoutEffect","useMergedRefs","Checkmark12Filled","Checkmark16Filled","Square12Filled","Square16Filled","CircleFilled","Label","useFocusWithin","useCheckbox_unstable","props","ref","supportsLabelFor","supportsRequired","disabled","required","shape","size","labelPosition","onChange","checked","setChecked","defaultState","defaultChecked","state","initialState","nativeProps","primarySlotTagName","excludedPropNames","mixed","id","primary","checkmarkIcon","createElement","components","root","input","indicator","label","defaultProps","type","htmlFor","children","ev","val","currentTarget","indeterminate","inputRef","current"],"sources":["../../../src/components/Checkbox/useCheckbox.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useFieldControlProps_unstable } from '@fluentui/react-field';\nimport {\n  getPartitionedNativeProps,\n  resolveShorthand,\n  useControllableState,\n  useEventCallback,\n  useId,\n  useIsomorphicLayoutEffect,\n  useMergedRefs,\n} from '@fluentui/react-utilities';\nimport { CheckboxProps, CheckboxState } from './Checkbox.types';\nimport {\n  Checkmark12Filled,\n  Checkmark16Filled,\n  Square12Filled,\n  Square16Filled,\n  CircleFilled,\n} from '@fluentui/react-icons';\nimport { Label } from '@fluentui/react-label';\nimport { useFocusWithin } from '@fluentui/react-tabster';\n\n/**\n * Create the state required to render Checkbox.\n *\n * The returned state can be modified with hooks such as useCheckboxStyles_unstable,\n * before being passed to renderCheckbox_unstable.\n *\n * @param props - props from this instance of Checkbox\n * @param ref - reference to `<input>` element of Checkbox\n */\nexport const useCheckbox_unstable = (props: CheckboxProps, ref: React.Ref<HTMLInputElement>): CheckboxState => {\n  // Merge props from surrounding <Field>, if any\n  props = useFieldControlProps_unstable(props, { supportsLabelFor: true, supportsRequired: true });\n\n  const { disabled = false, required, shape = 'square', size = 'medium', labelPosition = 'after', onChange } = props;\n\n  const [checked, setChecked] = useControllableState({\n    defaultState: props.defaultChecked,\n    state: props.checked,\n    initialState: false,\n  });\n\n  const nativeProps = getPartitionedNativeProps({\n    props,\n    primarySlotTagName: 'input',\n    excludedPropNames: ['checked', 'defaultChecked', 'size', 'onChange'],\n  });\n\n  const mixed = checked === 'mixed';\n  const id = useId('checkbox-', nativeProps.primary.id);\n\n  let checkmarkIcon;\n  if (mixed) {\n    if (shape === 'circular') {\n      checkmarkIcon = <CircleFilled />;\n    } else {\n      checkmarkIcon = size === 'large' ? <Square16Filled /> : <Square12Filled />;\n    }\n  } else if (checked) {\n    checkmarkIcon = size === 'large' ? <Checkmark16Filled /> : <Checkmark12Filled />;\n  }\n\n  const state: CheckboxState = {\n    shape,\n    checked,\n    disabled,\n    size,\n    labelPosition,\n    components: {\n      root: 'span',\n      input: 'input',\n      indicator: 'div',\n      label: Label,\n    },\n    root: resolveShorthand(props.root, {\n      required: true,\n      defaultProps: {\n        ref: useFocusWithin<HTMLSpanElement>(),\n        ...nativeProps.root,\n      },\n    }),\n    input: resolveShorthand(props.input, {\n      required: true,\n      defaultProps: {\n        type: 'checkbox',\n        id,\n        ref,\n        checked: checked === true,\n        ...nativeProps.primary,\n      },\n    }),\n    label: resolveShorthand(props.label, {\n      required: false,\n      defaultProps: {\n        htmlFor: id,\n        disabled,\n        required,\n        size: 'medium', // Even if the checkbox itself is large\n      },\n    }),\n    indicator: resolveShorthand(props.indicator, {\n      required: true,\n      defaultProps: {\n        'aria-hidden': true,\n        children: checkmarkIcon,\n      },\n    }),\n  };\n\n  state.input.onChange = useEventCallback(ev => {\n    const val = ev.currentTarget.indeterminate ? 'mixed' : ev.currentTarget.checked;\n    onChange?.(ev, { checked: val });\n    setChecked(val);\n  });\n\n  // Create a ref object for the input element so we can use it to set the indeterminate prop.\n  // Use useMergedRefs, since the ref might be undefined or a function-ref (no .current)\n  const inputRef = useMergedRefs(state.input.ref);\n  state.input.ref = inputRef;\n\n  // Set the <input> element's checked and indeterminate properties based on our tri-state property.\n  // Since indeterminate can only be set via javascript, it has to be done in a layout effect.\n  useIsomorphicLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = mixed;\n    }\n  }, [inputRef, mixed]);\n\n  return state;\n};\n"],"mappings":"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"}