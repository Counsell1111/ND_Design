{"version":3,"names":["React","getNativeElementProps","mergeCallbacks","useEventCallback","useMergedRefs","useContextSelector","useHasParentContext","getDropdownActionFromKey","getIndexFromAction","useOptionCollection","useScrollOptionsIntoView","useSelection","ComboboxContext","useListbox_unstable","props","ref","multiselect","optionCollection","getCount","getOptionAtIndex","getIndexOfId","clearSelection","selectedOptions","selectOption","activeOption","setActiveOption","useState","focusVisible","setFocusVisible","onKeyDown","event","action","open","maxIndex","activeIndex","id","newIndex","preventDefault","onMouseOver","hasComboboxContext","comboboxActiveOption","ctx","comboboxFocusVisible","comboboxSelectedOptions","comboboxSelectOption","comboboxSetActiveOption","optionContextValues","state","components","root","role","undefined","tabIndex","scrollContainerRef"],"sources":["../../../src/components/Listbox/useListbox.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, mergeCallbacks, useEventCallback, useMergedRefs } from '@fluentui/react-utilities';\nimport { useContextSelector, useHasParentContext } from '@fluentui/react-context-selector';\nimport { getDropdownActionFromKey, getIndexFromAction } from '../../utils/dropdownKeyActions';\nimport type { OptionValue } from '../../utils/OptionCollection.types';\nimport { useOptionCollection } from '../../utils/useOptionCollection';\nimport { useScrollOptionsIntoView } from '../../utils/useScrollOptionsIntoView';\nimport { useSelection } from '../../utils/useSelection';\nimport { ComboboxContext } from '../../contexts/ComboboxContext';\nimport type { ListboxProps, ListboxState } from './Listbox.types';\n\n/**\n * Create the state required to render Listbox.\n *\n * The returned state can be modified with hooks such as useListboxStyles_unstable,\n * before being passed to renderListbox_unstable.\n *\n * @param props - props from this instance of Listbox\n * @param ref - reference to root HTMLElement of Listbox\n */\nexport const useListbox_unstable = (props: ListboxProps, ref: React.Ref<HTMLElement>): ListboxState => {\n  const { multiselect } = props;\n  const optionCollection = useOptionCollection();\n  const { getCount, getOptionAtIndex, getIndexOfId } = optionCollection;\n\n  const { clearSelection, selectedOptions, selectOption } = useSelection(props);\n\n  const [activeOption, setActiveOption] = React.useState<OptionValue | undefined>();\n\n  // track whether keyboard focus outline should be shown\n  // tabster/keyborg doesn't work here, since the actual keyboard focus target doesn't move\n  const [focusVisible, setFocusVisible] = React.useState(false);\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    const action = getDropdownActionFromKey(event, { open: true });\n    const maxIndex = getCount() - 1;\n    const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;\n    let newIndex = activeIndex;\n\n    switch (action) {\n      case 'Select':\n      case 'CloseSelect':\n        activeOption && selectOption(event, activeOption);\n        break;\n      default:\n        newIndex = getIndexFromAction(action, activeIndex, maxIndex);\n    }\n\n    if (newIndex !== activeIndex) {\n      // prevent default page scroll/keyboard action if the index changed\n      event.preventDefault();\n      setActiveOption(getOptionAtIndex(newIndex));\n      setFocusVisible(true);\n    }\n  };\n\n  const onMouseOver = (event: React.MouseEvent<HTMLElement>) => {\n    setFocusVisible(false);\n  };\n\n  // get state from parent combobox, if it exists\n  const hasComboboxContext = useHasParentContext(ComboboxContext);\n  const comboboxActiveOption = useContextSelector(ComboboxContext, ctx => ctx.activeOption);\n  const comboboxFocusVisible = useContextSelector(ComboboxContext, ctx => ctx.focusVisible);\n  const comboboxSelectedOptions = useContextSelector(ComboboxContext, ctx => ctx.selectedOptions);\n  const comboboxSelectOption = useContextSelector(ComboboxContext, ctx => ctx.selectOption);\n  const comboboxSetActiveOption = useContextSelector(ComboboxContext, ctx => ctx.setActiveOption);\n\n  // without a parent combobox context, provide values directly from Listbox\n  const optionContextValues = hasComboboxContext\n    ? {\n        activeOption: comboboxActiveOption,\n        focusVisible: comboboxFocusVisible,\n        selectedOptions: comboboxSelectedOptions,\n        selectOption: comboboxSelectOption,\n        setActiveOption: comboboxSetActiveOption,\n      }\n    : {\n        activeOption,\n        focusVisible,\n        selectedOptions,\n        selectOption,\n        setActiveOption,\n      };\n\n  const state: ListboxState = {\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      ref,\n      role: multiselect ? 'menu' : 'listbox',\n      'aria-activedescendant': hasComboboxContext ? undefined : activeOption?.id,\n      'aria-multiselectable': multiselect,\n      tabIndex: 0,\n      ...props,\n    }),\n    multiselect,\n    clearSelection,\n    ...optionCollection,\n    ...optionContextValues,\n  };\n\n  const scrollContainerRef = useScrollOptionsIntoView(state);\n  state.root.ref = useMergedRefs(state.root.ref, scrollContainerRef);\n\n  state.root.onKeyDown = useEventCallback(mergeCallbacks(state.root.onKeyDown, onKeyDown));\n  state.root.onMouseOver = useEventCallback(mergeCallbacks(state.root.onMouseOver, onMouseOver));\n\n  return state;\n};\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,qBAAqB,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,aAAa,QAAQ;AACvF,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ;AACxD,SAASC,wBAAwB,EAAEC,kBAAkB,QAAQ;AAE7D,SAASC,mBAAmB,QAAQ;AACpC,SAASC,wBAAwB,QAAQ;AACzC,SAASC,YAAY,QAAQ;AAC7B,SAASC,eAAe,QAAQ;AAGhC;;;;;;;;;AASA,OAAO,MAAMC,mBAAA,GAAsBA,CAACC,KAAA,EAAqBC,GAAA,KAA8C;EACrG,MAAM;IAAEC;EAAW,CAAE,GAAGF,KAAA;EACxB,MAAMG,gBAAA,GAAmBR,mBAAA;EACzB,MAAM;IAAES,QAAA;IAAUC,gBAAA;IAAkBC;EAAY,CAAE,GAAGH,gBAAA;EAErD,MAAM;IAAEI,cAAA;IAAgBC,eAAA;IAAiBC;EAAY,CAAE,GAAGZ,YAAA,CAAaG,KAAA;EAEvE,MAAM,CAACU,YAAA,EAAcC,eAAA,CAAgB,GAAGzB,KAAA,CAAM0B,QAAQ;EAEtD;EACA;EACA,MAAM,CAACC,YAAA,EAAcC,eAAA,CAAgB,GAAG5B,KAAA,CAAM0B,QAAQ,CAAC,KAAK;EAE5D,MAAMG,SAAA,GAAaC,KAAA,IAA4C;IAC7D,MAAMC,MAAA,GAASxB,wBAAA,CAAyBuB,KAAA,EAAO;MAAEE,IAAA,EAAM;IAAK;IAC5D,MAAMC,QAAA,GAAWf,QAAA,KAAa;IAC9B,MAAMgB,WAAA,GAAcV,YAAA,GAAeJ,YAAA,CAAaI,YAAA,CAAaW,EAAE,IAAI,CAAC,CAAC;IACrE,IAAIC,QAAA,GAAWF,WAAA;IAEf,QAAQH,MAAA;MACN,KAAK;MACL,KAAK;QACHP,YAAA,IAAgBD,YAAA,CAAaO,KAAA,EAAON,YAAA;QACpC;MACF;QACEY,QAAA,GAAW5B,kBAAA,CAAmBuB,MAAA,EAAQG,WAAA,EAAaD,QAAA;IAAA;IAGvD,IAAIG,QAAA,KAAaF,WAAA,EAAa;MAC5B;MACAJ,KAAA,CAAMO,cAAc;MACpBZ,eAAA,CAAgBN,gBAAA,CAAiBiB,QAAA;MACjCR,eAAA,CAAgB,IAAI;IACtB;EACF;EAEA,MAAMU,WAAA,GAAeR,KAAA,IAAyC;IAC5DF,eAAA,CAAgB,KAAK;EACvB;EAEA;EACA,MAAMW,kBAAA,GAAqBjC,mBAAA,CAAoBM,eAAA;EAC/C,MAAM4B,oBAAA,GAAuBnC,kBAAA,CAAmBO,eAAA,EAAiB6B,GAAA,IAAOA,GAAA,CAAIjB,YAAY;EACxF,MAAMkB,oBAAA,GAAuBrC,kBAAA,CAAmBO,eAAA,EAAiB6B,GAAA,IAAOA,GAAA,CAAId,YAAY;EACxF,MAAMgB,uBAAA,GAA0BtC,kBAAA,CAAmBO,eAAA,EAAiB6B,GAAA,IAAOA,GAAA,CAAInB,eAAe;EAC9F,MAAMsB,oBAAA,GAAuBvC,kBAAA,CAAmBO,eAAA,EAAiB6B,GAAA,IAAOA,GAAA,CAAIlB,YAAY;EACxF,MAAMsB,uBAAA,GAA0BxC,kBAAA,CAAmBO,eAAA,EAAiB6B,GAAA,IAAOA,GAAA,CAAIhB,eAAe;EAE9F;EACA,MAAMqB,mBAAA,GAAsBP,kBAAA,GACxB;IACEf,YAAA,EAAcgB,oBAAA;IACdb,YAAA,EAAce,oBAAA;IACdpB,eAAA,EAAiBqB,uBAAA;IACjBpB,YAAA,EAAcqB,oBAAA;IACdnB,eAAA,EAAiBoB;EACnB,IACA;IACErB,YAAA;IACAG,YAAA;IACAL,eAAA;IACAC,YAAA;IACAE;EACF,CAAC;EAEL,MAAMsB,KAAA,GAAsB;IAC1BC,UAAA,EAAY;MACVC,IAAA,EAAM;IACR;IACAA,IAAA,EAAMhD,qBAAA,CAAsB,OAAO;MACjCc,GAAA;MACAmC,IAAA,EAAMlC,WAAA,GAAc,SAAS,SAAS;MACtC,yBAAyBuB,kBAAA,GAAqBY,SAAA,GAAY3B,YAAA,aAAAA,YAAA,uBAAAA,YAAA,CAAcW,EAAE;MAC1E,wBAAwBnB,WAAA;MACxBoC,QAAA,EAAU;MACV,GAAGtC;IACL;IACAE,WAAA;IACAK,cAAA;IACA,GAAGJ,gBAAgB;IACnB,GAAG6B;EACL;EAEA,MAAMO,kBAAA,GAAqB3C,wBAAA,CAAyBqC,KAAA;EACpDA,KAAA,CAAME,IAAI,CAAClC,GAAG,GAAGX,aAAA,CAAc2C,KAAA,CAAME,IAAI,CAAClC,GAAG,EAAEsC,kBAAA;EAE/CN,KAAA,CAAME,IAAI,CAACpB,SAAS,GAAG1B,gBAAA,CAAiBD,cAAA,CAAe6C,KAAA,CAAME,IAAI,CAACpB,SAAS,EAAEA,SAAA;EAC7EkB,KAAA,CAAME,IAAI,CAACX,WAAW,GAAGnC,gBAAA,CAAiBD,cAAA,CAAe6C,KAAA,CAAME,IAAI,CAACX,WAAW,EAAEA,WAAA;EAEjF,OAAOS,KAAA;AACT"}