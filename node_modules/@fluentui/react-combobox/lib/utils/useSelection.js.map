{"version":3,"names":["useCallback","useControllableState","useSelection","props","defaultSelectedOptions","multiselect","onOptionSelect","selectedOptions","setSelectedOptions","state","defaultState","initialState","selectOption","event","option","disabled","newSelection","value","selectedIndex","findIndex","o","slice","optionValue","optionText","text","clearSelection","undefined"],"sources":["../../src/utils/useSelection.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { useControllableState } from '@fluentui/react-utilities';\nimport { OptionValue } from './OptionCollection.types';\nimport { SelectionEvents, SelectionProps, SelectionState } from './Selection.types';\n\nexport const useSelection = (props: SelectionProps): SelectionState => {\n  const { defaultSelectedOptions, multiselect, onOptionSelect } = props;\n\n  const [selectedOptions, setSelectedOptions] = useControllableState({\n    state: props.selectedOptions,\n    defaultState: defaultSelectedOptions,\n    initialState: [],\n  });\n\n  const selectOption = useCallback(\n    (event: SelectionEvents, option: OptionValue) => {\n      // if the option is disabled, do nothing\n      if (option.disabled) {\n        return;\n      }\n\n      // for single-select, always return the selected option\n      let newSelection = [option.value];\n\n      // toggle selected state of the option for multiselect\n      if (multiselect) {\n        const selectedIndex = selectedOptions.findIndex(o => o === option.value);\n        if (selectedIndex > -1) {\n          // deselect option\n          newSelection = [...selectedOptions.slice(0, selectedIndex), ...selectedOptions.slice(selectedIndex + 1)];\n        } else {\n          // select option\n          newSelection = [...selectedOptions, option.value];\n        }\n      }\n\n      setSelectedOptions(newSelection);\n      onOptionSelect?.(event, { optionValue: option.value, optionText: option.text, selectedOptions: newSelection });\n    },\n    [onOptionSelect, multiselect, selectedOptions, setSelectedOptions],\n  );\n\n  const clearSelection = (event: SelectionEvents) => {\n    setSelectedOptions([]);\n    onOptionSelect?.(event, { optionValue: undefined, optionText: undefined, selectedOptions: [] });\n  };\n\n  return { clearSelection, selectOption, selectedOptions };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ;AAC5B,SAASC,oBAAoB,QAAQ;AAIrC,OAAO,MAAMC,YAAA,GAAgBC,KAAA,IAA0C;EACrE,MAAM;IAAEC,sBAAA;IAAwBC,WAAA;IAAaC;EAAc,CAAE,GAAGH,KAAA;EAEhE,MAAM,CAACI,eAAA,EAAiBC,kBAAA,CAAmB,GAAGP,oBAAA,CAAqB;IACjEQ,KAAA,EAAON,KAAA,CAAMI,eAAe;IAC5BG,YAAA,EAAcN,sBAAA;IACdO,YAAA,EAAc;EAChB;EAEA,MAAMC,YAAA,GAAeZ,WAAA,CACnB,CAACa,KAAA,EAAwBC,MAAA,KAAwB;IAC/C;IACA,IAAIA,MAAA,CAAOC,QAAQ,EAAE;MACnB;IACF;IAEA;IACA,IAAIC,YAAA,GAAe,CAACF,MAAA,CAAOG,KAAK,CAAC;IAEjC;IACA,IAAIZ,WAAA,EAAa;MACf,MAAMa,aAAA,GAAgBX,eAAA,CAAgBY,SAAS,CAACC,CAAA,IAAKA,CAAA,KAAMN,MAAA,CAAOG,KAAK;MACvE,IAAIC,aAAA,GAAgB,CAAC,GAAG;QACtB;QACAF,YAAA,GAAe,C,GAAIT,eAAA,CAAgBc,KAAK,CAAC,GAAGH,aAAA,G,GAAmBX,eAAA,CAAgBc,KAAK,CAACH,aAAA,GAAgB,GAAG;MAC1G,OAAO;QACL;QACAF,YAAA,GAAe,C,GAAIT,eAAA,EAAiBO,MAAA,CAAOG,KAAK,CAAC;MACnD;IACF;IAEAT,kBAAA,CAAmBQ,YAAA;IACnBV,cAAA,aAAAA,cAAA,uBAAAA,cAAA,CAAiBO,KAAA,EAAO;MAAES,WAAA,EAAaR,MAAA,CAAOG,KAAK;MAAEM,UAAA,EAAYT,MAAA,CAAOU,IAAI;MAAEjB,eAAA,EAAiBS;IAAa;EAC9G,GACA,CAACV,cAAA,EAAgBD,WAAA,EAAaE,eAAA,EAAiBC,kBAAA,CAAmB;EAGpE,MAAMiB,cAAA,GAAkBZ,KAAA,IAA2B;IACjDL,kBAAA,CAAmB,EAAE;IACrBF,cAAA,aAAAA,cAAA,uBAAAA,cAAA,CAAiBO,KAAA,EAAO;MAAES,WAAA,EAAaI,SAAA;MAAWH,UAAA,EAAYG,SAAA;MAAWnB,eAAA,EAAiB;IAAG;EAC/F;EAEA,OAAO;IAAEkB,cAAA;IAAgBb,YAAA;IAAcL;EAAgB;AACzD"}