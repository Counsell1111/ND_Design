{"version":3,"names":["resolvePositioningShorthand","usePositioning","useMergedRefs","useComboboxPopup","props","triggerShorthand","listboxShorthand","positioning","fallbackPositions","popperOptions","position","align","offset","crossAxis","mainAxis","targetRef","containerRef","listboxRef","ref","listbox"],"sources":["../../src/utils/useComboboxPopup.ts"],"sourcesContent":["import { PositioningShorthandValue, resolvePositioningShorthand, usePositioning } from '@fluentui/react-positioning';\nimport { ExtractSlotProps, Slot, useMergedRefs } from '@fluentui/react-utilities';\nimport type { ComboboxBaseProps } from './ComboboxBase.types';\nimport { Listbox } from '../components/Listbox/Listbox';\n\nexport function useComboboxPopup(\n  props: ComboboxBaseProps,\n  triggerShorthand?: ExtractSlotProps<Slot<'button'>>,\n  listboxShorthand?: ExtractSlotProps<Slot<typeof Listbox>>,\n): [trigger: ExtractSlotProps<Slot<'button'>>, listbox?: ExtractSlotProps<Slot<typeof Listbox>>];\nexport function useComboboxPopup(\n  props: ComboboxBaseProps,\n  triggerShorthand?: ExtractSlotProps<Slot<'input'>>,\n  listboxShorthand?: ExtractSlotProps<Slot<typeof Listbox>>,\n): [trigger: ExtractSlotProps<Slot<'input'>>, listbox?: ExtractSlotProps<Slot<typeof Listbox>>];\n\nexport function useComboboxPopup(\n  props: ComboboxBaseProps,\n  triggerShorthand?: ExtractSlotProps<Slot<'input'>> | ExtractSlotProps<Slot<'button'>>,\n  listboxShorthand?: ExtractSlotProps<Slot<typeof Listbox>>,\n): [\n  trigger: ExtractSlotProps<Slot<'input'>> | ExtractSlotProps<Slot<'button'>>,\n  listbox?: ExtractSlotProps<Slot<typeof Listbox>>,\n] {\n  const { positioning } = props;\n\n  // Set a default set of fallback positions to try if the dropdown does not fit on screen\n  const fallbackPositions: PositioningShorthandValue[] = ['above', 'after', 'after-top', 'before', 'before-top'];\n\n  // popper options\n  const popperOptions = {\n    position: 'below' as const,\n    align: 'start' as const,\n    offset: { crossAxis: 0, mainAxis: 2 },\n    fallbackPositions,\n    ...resolvePositioningShorthand(positioning),\n  };\n\n  const { targetRef, containerRef } = usePositioning(popperOptions);\n\n  const listboxRef = useMergedRefs(listboxShorthand?.ref, containerRef);\n  const listbox = listboxShorthand && { ...listboxShorthand, ref: listboxRef };\n\n  return [{ ...triggerShorthand, ref: useMergedRefs(triggerShorthand?.ref, targetRef) }, listbox];\n}\n"],"mappings":"AAAA,SAAoCA,2BAA2B,EAAEC,cAAc,QAAQ;AACvF,SAAiCC,aAAa,QAAQ;AAetD,OAAO,SAASC,iBACdC,KAAwB,EACxBC,gBAAqF,EACrFC,gBAAyD,EAIzD;EACA,MAAM;IAAEC;EAAW,CAAE,GAAGH,KAAA;EAExB;EACA,MAAMI,iBAAA,GAAiD,CAAC,SAAS,SAAS,aAAa,UAAU,aAAa;EAE9G;EACA,MAAMC,aAAA,GAAgB;IACpBC,QAAA,EAAU;IACVC,KAAA,EAAO;IACPC,MAAA,EAAQ;MAAEC,SAAA,EAAW;MAAGC,QAAA,EAAU;IAAE;IACpCN,iBAAA;IACA,GAAGR,2BAAA,CAA4BO,WAAA;EACjC;EAEA,MAAM;IAAEQ,SAAA;IAAWC;EAAY,CAAE,GAAGf,cAAA,CAAeQ,aAAA;EAEnD,MAAMQ,UAAA,GAAaf,aAAA,CAAcI,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA,CAAkBY,GAAG,EAAEF,YAAA;EACxD,MAAMG,OAAA,GAAUb,gBAAA,IAAoB;IAAE,GAAGA,gBAAgB;IAAEY,GAAA,EAAKD;EAAW;EAE3E,OAAO,CAAC;IAAE,GAAGZ,gBAAgB;IAAEa,GAAA,EAAKhB,aAAA,CAAcG,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA,CAAkBa,GAAG,EAAEH,SAAA;EAAW,GAAGI,OAAA,CAAQ;AACjG"}