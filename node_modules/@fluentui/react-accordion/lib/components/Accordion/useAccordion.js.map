{"version":3,"names":["React","getNativeElementProps","useControllableState","useEventCallback","useArrowNavigationGroup","useAccordion_unstable","props","ref","openItems","controlledOpenItems","defaultOpenItems","multiple","collapsible","onToggle","navigation","setOpenItems","state","useMemo","normalizeValues","defaultState","initializeUncontrolledOpenItems","initialState","arrowNavigationProps","circular","tabbable","requestToggle","event","data","previousOpenItems","updateOpenItems","value","components","root","undefined","Array","isArray","includes","length","filter","i","sort","index"],"sources":["../../../src/components/Accordion/useAccordion.ts"],"sourcesContent":["import * as React from 'react';\nimport { getNativeElementProps, useControllableState, useEventCallback } from '@fluentui/react-utilities';\nimport type { AccordionProps, AccordionState, AccordionToggleData, AccordionToggleEvent } from './Accordion.types';\nimport type { AccordionItemValue } from '../AccordionItem/AccordionItem.types';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\n\n/**\n * Returns the props and state required to render the component\n * @param props - Accordion properties\n * @param ref - reference to root HTMLElement of Accordion\n */\nexport const useAccordion_unstable = (props: AccordionProps, ref: React.Ref<HTMLElement>): AccordionState => {\n  const {\n    openItems: controlledOpenItems,\n    defaultOpenItems,\n    multiple = false,\n    collapsible = false,\n    onToggle,\n    navigation,\n  } = props;\n  const [openItems, setOpenItems] = useControllableState({\n    state: React.useMemo(() => normalizeValues(controlledOpenItems), [controlledOpenItems]),\n    defaultState: () => initializeUncontrolledOpenItems({ defaultOpenItems, multiple }),\n    initialState: [],\n  });\n\n  const arrowNavigationProps = useArrowNavigationGroup({\n    circular: navigation === 'circular',\n    tabbable: true,\n  });\n\n  const requestToggle = useEventCallback((event: AccordionToggleEvent, data: AccordionToggleData) => {\n    onToggle?.(event, data);\n    setOpenItems(previousOpenItems => updateOpenItems(data.value, previousOpenItems, multiple, collapsible));\n  });\n\n  return {\n    collapsible,\n    navigation,\n    openItems,\n    requestToggle,\n    components: {\n      root: 'div',\n    },\n    root: getNativeElementProps('div', {\n      ...props,\n      ...(navigation ? arrowNavigationProps : {}),\n      ref,\n    }),\n  };\n};\n\n/**\n * Initial value for the uncontrolled case of the list of open indexes\n */\nfunction initializeUncontrolledOpenItems({\n  defaultOpenItems,\n  multiple,\n}: Pick<AccordionProps, 'defaultOpenItems' | 'multiple'>): AccordionItemValue[] {\n  if (defaultOpenItems !== undefined) {\n    if (Array.isArray(defaultOpenItems)) {\n      return multiple ? defaultOpenItems : [defaultOpenItems[0]];\n    }\n    return [defaultOpenItems];\n  }\n  return [];\n}\n\n/**\n * Updates the list of open indexes based on an index that changes\n * @param value - the index that will change\n * @param previousOpenItems - list of current open indexes\n * @param multiple - if Accordion support multiple Panels opened at the same time\n * @param collapsible - if Accordion support multiple Panels closed at the same time\n */\nfunction updateOpenItems(\n  value: AccordionItemValue,\n  previousOpenItems: AccordionItemValue[],\n  multiple: boolean,\n  collapsible: boolean,\n) {\n  if (multiple) {\n    if (previousOpenItems.includes(value)) {\n      if (previousOpenItems.length > 1 || collapsible) {\n        return previousOpenItems.filter(i => i !== value);\n      }\n    } else {\n      return [...previousOpenItems, value].sort();\n    }\n  } else {\n    return previousOpenItems[0] === value && collapsible ? [] : [value];\n  }\n  return previousOpenItems;\n}\n\n/**\n * Normalizes Accordion index into an array of indexes\n */\nfunction normalizeValues(index?: AccordionItemValue | AccordionItemValue[]): AccordionItemValue[] | undefined {\n  if (index === undefined) {\n    return undefined;\n  }\n  return Array.isArray(index) ? index : [index];\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,qBAAqB,EAAEC,oBAAoB,EAAEC,gBAAgB,QAAQ;AAG9E,SAASC,uBAAuB,QAAQ;AAExC;;;;;AAKA,OAAO,MAAMC,qBAAA,GAAwBA,CAACC,KAAA,EAAuBC,GAAA,KAAgD;EAC3G,MAAM;IACJC,SAAA,EAAWC,mBAAA;IACXC,gBAAA;IACAC,QAAA,GAAW,KAAK;IAChBC,WAAA,GAAc,KAAK;IACnBC,QAAA;IACAC;EAAU,CACX,GAAGR,KAAA;EACJ,MAAM,CAACE,SAAA,EAAWO,YAAA,CAAa,GAAGb,oBAAA,CAAqB;IACrDc,KAAA,EAAOhB,KAAA,CAAMiB,OAAO,CAAC,MAAMC,eAAA,CAAgBT,mBAAA,GAAsB,CAACA,mBAAA,CAAoB;IACtFU,YAAA,EAAcA,CAAA,KAAMC,+BAAA,CAAgC;MAAEV,gBAAA;MAAkBC;IAAS;IACjFU,YAAA,EAAc;EAChB;EAEA,MAAMC,oBAAA,GAAuBlB,uBAAA,CAAwB;IACnDmB,QAAA,EAAUT,UAAA,KAAe;IACzBU,QAAA,EAAU;EACZ;EAEA,MAAMC,aAAA,GAAgBtB,gBAAA,CAAiB,CAACuB,KAAA,EAA6BC,IAAA,KAA8B;IACjGd,QAAA,aAAAA,QAAA,uBAAAA,QAAA,CAAWa,KAAA,EAAOC,IAAA;IAClBZ,YAAA,CAAaa,iBAAA,IAAqBC,eAAA,CAAgBF,IAAA,CAAKG,KAAK,EAAEF,iBAAA,EAAmBjB,QAAA,EAAUC,WAAA;EAC7F;EAEA,OAAO;IACLA,WAAA;IACAE,UAAA;IACAN,SAAA;IACAiB,aAAA;IACAM,UAAA,EAAY;MACVC,IAAA,EAAM;IACR;IACAA,IAAA,EAAM/B,qBAAA,CAAsB,OAAO;MACjC,GAAGK,KAAK;MACR,IAAIQ,UAAA,GAAaQ,oBAAA,GAAuB,CAAC,CAAC;MAC1Cf;IACF;EACF;AACF;AAEA;;;AAGA,SAASa,gCAAgC;EACvCV,gBAAA;EACAC;AAAQ,CAC8C,EAAwB;EAC9E,IAAID,gBAAA,KAAqBuB,SAAA,EAAW;IAClC,IAAIC,KAAA,CAAMC,OAAO,CAACzB,gBAAA,GAAmB;MACnC,OAAOC,QAAA,GAAWD,gBAAA,GAAmB,CAACA,gBAAgB,CAAC,EAAE,CAAC;IAC5D;IACA,OAAO,CAACA,gBAAA,CAAiB;EAC3B;EACA,OAAO,EAAE;AACX;AAEA;;;;;;;AAOA,SAASmB,gBACPC,KAAyB,EACzBF,iBAAuC,EACvCjB,QAAiB,EACjBC,WAAoB,EACpB;EACA,IAAID,QAAA,EAAU;IACZ,IAAIiB,iBAAA,CAAkBQ,QAAQ,CAACN,KAAA,GAAQ;MACrC,IAAIF,iBAAA,CAAkBS,MAAM,GAAG,KAAKzB,WAAA,EAAa;QAC/C,OAAOgB,iBAAA,CAAkBU,MAAM,CAACC,CAAA,IAAKA,CAAA,KAAMT,KAAA;MAC7C;IACF,OAAO;MACL,OAAO,C,GAAIF,iBAAA,EAAmBE,KAAA,CAAM,CAACU,IAAI;IAC3C;EACF,OAAO;IACL,OAAOZ,iBAAiB,CAAC,EAAE,KAAKE,KAAA,IAASlB,WAAA,GAAc,EAAE,GAAG,CAACkB,KAAA,CAAM;EACrE;EACA,OAAOF,iBAAA;AACT;AAEA;;;AAGA,SAASV,gBAAgBuB,KAAiD,EAAoC;EAC5G,IAAIA,KAAA,KAAUR,SAAA,EAAW;IACvB,OAAOA,SAAA;EACT;EACA,OAAOC,KAAA,CAAMC,OAAO,CAACM,KAAA,IAASA,KAAA,GAAQ,CAACA,KAAA,CAAM;AAC/C"}