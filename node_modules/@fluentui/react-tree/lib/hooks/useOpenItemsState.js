import { useControllableState, useEventCallback } from '@fluentui/react-utilities';
import * as React from 'react';
import { createImmutableSet, emptyImmutableSet } from '../utils/ImmutableSet';
export function useOpenItemsState(props) {
  const [openItems, setOpenItems] = useControllableState({
    state: React.useMemo(() => props.openItems && createImmutableSet(props.openItems), [props.openItems]),
    defaultState: React.useMemo(() => props.defaultOpenItems && createImmutableSet(props.defaultOpenItems), [props.defaultOpenItems]),
    initialState: emptyImmutableSet
  });
  const updateOpenItems = useEventCallback(data => setOpenItems(currentOpenItems => createNextOpenItems(data, currentOpenItems)));
  return [openItems, updateOpenItems];
}
function createNextOpenItems(data, previousOpenItems) {
  const id = data.target.id;
  const previousOpenItemsHasId = previousOpenItems.has(id);
  if (data.open ? previousOpenItemsHasId : !previousOpenItemsHasId) {
    return previousOpenItems;
  }
  const nextOpenItems = createImmutableSet(previousOpenItems);
  return data.open ? nextOpenItems.add(id) : nextOpenItems.delete(id);
}
//# sourceMappingURL=useOpenItemsState.js.map