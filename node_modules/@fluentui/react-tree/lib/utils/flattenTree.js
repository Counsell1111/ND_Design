import * as React from 'react';
let count = 1;
function flattenTreeRecursive(items, parent, level = 1) {
  return items.reduce((acc, {
    subtree,
    ...item
  }, index) => {
    var _item_id;
    const id = (_item_id = item.id) !== null && _item_id !== void 0 ? _item_id : `fui-FlatTreeItem-${count++}`;
    var _item_value;
    const flatTreeItem = {
      'aria-level': level,
      'aria-posinset': index + 1,
      'aria-setsize': items.length,
      parentValue: parent === null || parent === void 0 ? void 0 : parent.value,
      value: (_item_value = item.value) !== null && _item_value !== void 0 ? _item_value : id,
      leaf: subtree === undefined,
      ...item
    };
    acc.push(flatTreeItem);
    if (subtree !== undefined) {
      acc.push(...flattenTreeRecursive(subtree, flatTreeItem, level + 1));
    }
    return acc;
  }, []);
}
/**
 * Converts a nested structure to a flat one which can be consumed by `useFlatTreeItems`
 * @example
 * ```tsx
 * const defaultItems = flattenTree_unstable([
 *  {
 *    children: <TreeItemLayout>level 1, item 1</TreeItemLayout>,
 *    subtree: [
 *      {
 *        children: <TreeItemLayout>level 2, item 1</TreeItemLayout>,
 *      },
 *      {
 *        children: <TreeItemLayout>level 2, item 2</TreeItemLayout>,
 *      },
 *      {
 *        children: <TreeItemLayout>level 2, item 3</TreeItemLayout>,
 *      },
 *    ],
 *  },
 *  {
 *    children: <TreeItemLayout>level 1, item 2</TreeItemLayout>,
 *    subtree: [
 *      {
 *        children: <TreeItemLayout>level 2, item 1</TreeItemLayout>,
 *        subtree: [
 *          {
 *            children: <TreeItemLayout>level 3, item 1</TreeItemLayout>,
 *            subtree: [
 *              {
 *                children: <TreeItemLayout>level 4, item 1</TreeItemLayout>,
 *              },
 *            ],
 *          },
 *        ],
 *      },
 *    ],
 *  },
 * ]);
 * ```
 */ // eslint-disable-next-line @typescript-eslint/naming-convention
export const flattenTree_unstable = items => flattenTreeRecursive(items);
/**
 * @internal
 */
export const flattenTreeFromElement = (root, parent, level = 1) => {
  const children = React.Children.toArray(root.props.children);
  return children.reduce((acc, curr, index) => {
    const [content, subtree] = React.Children.toArray(curr.props.children);
    var _curr_props_id;
    const id = (_curr_props_id = curr.props.id) !== null && _curr_props_id !== void 0 ? _curr_props_id : `fui-FlatTreeItem-${count++}`;
    var _curr_props_value;
    const flatTreeItem = {
      'aria-level': level,
      'aria-posinset': index + 1,
      'aria-setsize': children.length,
      parentValue: parent === null || parent === void 0 ? void 0 : parent.value,
      value: (_curr_props_value = curr.props.value) !== null && _curr_props_value !== void 0 ? _curr_props_value : id,
      leaf: subtree === undefined,
      ...curr.props,
      children: content
    };
    acc.push(flatTreeItem);
    if (subtree !== undefined) {
      acc.push(...flattenTreeFromElement(subtree, flatTreeItem, level + 1));
    }
    return acc;
  }, []);
};
//# sourceMappingURL=flattenTree.js.map