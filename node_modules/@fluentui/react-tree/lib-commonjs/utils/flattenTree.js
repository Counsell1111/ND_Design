"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    flattenTree_unstable: ()=>flattenTree_unstable,
    flattenTreeFromElement: ()=>flattenTreeFromElement
});
const _interopRequireWildcard = require("@swc/helpers/lib/_interop_require_wildcard.js").default;
const _react = /*#__PURE__*/ _interopRequireWildcard(require("react"));
let count = 1;
function flattenTreeRecursive(items, parent, level = 1) {
    return items.reduce((acc, { subtree , ...item }, index)=>{
        var _item_id;
        const flatTreeItem = {
            'aria-level': level,
            'aria-posinset': index + 1,
            'aria-setsize': items.length,
            parentId: parent === null || parent === void 0 ? void 0 : parent.id,
            id: (_item_id = item.id) !== null && _item_id !== void 0 ? _item_id : `fui-FlatTreeItem-${count++}`,
            leaf: subtree === undefined,
            ...item
        };
        acc.push(flatTreeItem);
        if (subtree !== undefined) {
            acc.push(...flattenTreeRecursive(subtree, flatTreeItem, level + 1));
        }
        return acc;
    }, []);
}
const flattenTree_unstable = (items)=>flattenTreeRecursive(items);
const flattenTreeFromElement = (root, parent, level = 1)=>{
    const children = _react.Children.toArray(root.props.children);
    return children.reduce((acc, curr, index)=>{
        const [content, subtree] = _react.Children.toArray(curr.props.children);
        var _curr_props_id;
        const flatTreeItem = {
            'aria-level': level,
            'aria-posinset': index + 1,
            'aria-setsize': children.length,
            parentId: parent === null || parent === void 0 ? void 0 : parent.id,
            id: (_curr_props_id = curr.props.id) !== null && _curr_props_id !== void 0 ? _curr_props_id : `fui-FlatTreeItem-${count++}`,
            leaf: subtree === undefined,
            ...curr.props,
            children: content
        };
        acc.push(flatTreeItem);
        if (subtree !== undefined) {
            acc.push(...flattenTreeFromElement(subtree, flatTreeItem, level + 1));
        }
        return acc;
    }, []);
}; //# sourceMappingURL=flattenTree.js.map

//# sourceMappingURL=flattenTree.js.map