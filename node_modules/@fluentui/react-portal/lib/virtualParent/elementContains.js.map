{"version":3,"names":["getParent","elementContains","parent","child","set","WeakSet","nextParent","skipVirtual","has","add"],"sources":["../../src/virtualParent/elementContains.ts"],"sourcesContent":["import { getParent } from './getParent';\n\n/**\n * Similar functionality to `element.contains` DOM API for use without of order DOM elements that\n * checks the virtual parent hierarchy. If a virtual parents exists, it is chosen over the actual parent\n *\n * @returns true if the child can find the parent in its virtual hierarchy\n */\nexport function elementContains(parent: Node | null, child: Node | null): boolean {\n  if (!parent || !child) {\n    return false;\n  }\n\n  if (parent === child) {\n    return true;\n  } else {\n    // Tracks references of nodes that have been visited to prevent infinite loops\n    const set = new WeakSet<Node>();\n\n    while (child) {\n      const nextParent: Node | null = getParent(child, {\n        skipVirtual: set.has(child),\n      });\n      set.add(child);\n\n      if (nextParent === parent) {\n        return true;\n      }\n\n      child = nextParent;\n    }\n  }\n\n  return false;\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ;AAE1B;;;;;;AAMA,OAAO,SAASC,gBAAgBC,MAAmB,EAAEC,KAAkB,EAAW;EAChF,IAAI,CAACD,MAAA,IAAU,CAACC,KAAA,EAAO;IACrB,OAAO,KAAK;EACd;EAEA,IAAID,MAAA,KAAWC,KAAA,EAAO;IACpB,OAAO,IAAI;EACb,OAAO;IACL;IACA,MAAMC,GAAA,GAAM,IAAIC,OAAA;IAEhB,OAAOF,KAAA,EAAO;MACZ,MAAMG,UAAA,GAA0BN,SAAA,CAAUG,KAAA,EAAO;QAC/CI,WAAA,EAAaH,GAAA,CAAII,GAAG,CAACL,KAAA;MACvB;MACAC,GAAA,CAAIK,GAAG,CAACN,KAAA;MAER,IAAIG,UAAA,KAAeJ,MAAA,EAAQ;QACzB,OAAO,IAAI;MACb;MAEAC,KAAA,GAAQG,UAAA;IACV;EACF;EAEA,OAAO,KAAK;AACd"}