{"version":3,"names":["React","isFactoryDispatch","newState","useControllableState","options","isControlled","useIsControlled","state","initialState","defaultState","internalState","setInternalState","useState","stateRef","useRef","useEffect","current","setState","useCallback","controlledValue","undefined","process","env","NODE_ENV","error","Error","controlWarning","undefinedWarning","console","stack","join"],"sources":["../../src/hooks/useControllableState.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * @internal\n */\nexport type UseControllableStateOptions<State> = {\n  /**\n   * User-provided default state or initializer, for uncontrolled usage.\n   */\n  defaultState?: State | (() => State);\n  /**\n   * User-provided controlled state. `undefined` means internal state will be used.\n   */\n  state: State | undefined;\n  /**\n   * Used as the initial state if `state` and `defaultState` are both `undefined`.\n   * If `undefined` is the correct initial state, pass that here.\n   */\n  initialState: State;\n};\n\nfunction isFactoryDispatch<State>(newState: React.SetStateAction<State>): newState is (prevState: State) => State {\n  return typeof newState === 'function';\n}\n\n/**\n * @internal\n *\n * A `useState`-like hook to manage a value that could be either controlled or uncontrolled,\n * such as a checked state or text input string.\n *\n * Unlike `setState`, it's okay to call the returned updater (dispatch) function for either a\n * controlled or uncontrolled component. Calls will only be respected if the component is uncontrolled.\n *\n * @returns Same as [`useState`](https://reactjs.org/docs/hooks-reference.html#usestate): an array\n * of the current value and an updater (dispatch) function. The updater function is referentially\n * stable (won't change during the component's lifecycle). It can take either a new value, or a\n * function which is passed the previous value and returns the new value. Unlike `setState`, calls\n * to the updater function will only be respected if the component is uncontrolled.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport const useControllableState = <State>(\n  options: UseControllableStateOptions<State>,\n): [State, React.Dispatch<React.SetStateAction<State>>] => {\n  const isControlled = useIsControlled(options.state);\n  const initialState = typeof options.defaultState === 'undefined' ? options.initialState : options.defaultState;\n  const [internalState, setInternalState] = React.useState<State>(initialState);\n\n  const state = isControlled ? (options.state as State) : internalState;\n\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setState = React.useCallback((newState: React.SetStateAction<State>) => {\n    // React dispatch can use a factory\n    // https://reactjs.org/docs/hooks-reference.html#functional-updates\n    if (isFactoryDispatch(newState)) {\n      stateRef.current = newState(stateRef.current);\n    } else {\n      stateRef.current = newState;\n    }\n\n    setInternalState(stateRef.current);\n  }, []);\n\n  return [state, setState];\n};\n\n/**\n * Helper hook to handle previous comparison of controlled/uncontrolled\n * Prints an error when isControlled value switches between subsequent renders\n * @returns - whether the value is controlled\n */\nconst useIsControlled = (controlledValue: unknown) => {\n  const [isControlled] = React.useState<boolean>(() => controlledValue !== undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // We don't want these warnings in production even though it is against native behaviour\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (isControlled !== (controlledValue !== undefined)) {\n        const error = new Error();\n\n        const controlWarning = isControlled\n          ? 'a controlled value to be uncontrolled'\n          : 'an uncontrolled value to be controlled';\n\n        const undefinedWarning = isControlled ? 'defined to an undefined' : 'undefined to a defined';\n\n        // eslint-disable-next-line no-console\n        console.error(\n          [\n            // Default react error\n            'A component is changing ' + controlWarning + '. This is likely caused by the value',\n            'changing from ' + undefinedWarning + ' value, which should not happen.',\n            'Decide between using a controlled or uncontrolled input element for the lifetime of the component.',\n            'More info: https://reactjs.org/link/controlled-components',\n            error.stack,\n          ].join(' '),\n        );\n      }\n    }, [isControlled, controlledValue]);\n  }\n\n  return isControlled;\n};\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AAqBvB,SAASC,kBAAyBC,QAAqC,EAA2C;EAChH,OAAO,OAAOA,QAAA,KAAa;AAC7B;AAEA;;;;;;;;;;;;;;;;AAgBA,OAAO,MAAMC,oBAAA,GACXC,OAAA,IACyD;EACzD,MAAMC,YAAA,GAAeC,eAAA,CAAgBF,OAAA,CAAQG,KAAK;EAClD,MAAMC,YAAA,GAAe,OAAOJ,OAAA,CAAQK,YAAY,KAAK,cAAcL,OAAA,CAAQI,YAAY,GAAGJ,OAAA,CAAQK,YAAY;EAC9G,MAAM,CAACC,aAAA,EAAeC,gBAAA,CAAiB,GAAGX,KAAA,CAAMY,QAAQ,CAAQJ,YAAA;EAEhE,MAAMD,KAAA,GAAQF,YAAA,GAAgBD,OAAA,CAAQG,KAAK,GAAaG,aAAa;EAErE,MAAMG,QAAA,GAAWb,KAAA,CAAMc,MAAM,CAACP,KAAA;EAC9BP,KAAA,CAAMe,SAAS,CAAC,MAAM;IACpBF,QAAA,CAASG,OAAO,GAAGT,KAAA;EACrB,GAAG,CAACA,KAAA,CAAM;EAEV;EACA;EACA,MAAMU,QAAA,GAAWjB,KAAA,CAAMkB,WAAW,CAAEhB,QAAA,IAA0C;IAC5E;IACA;IACA,IAAID,iBAAA,CAAkBC,QAAA,GAAW;MAC/BW,QAAA,CAASG,OAAO,GAAGd,QAAA,CAASW,QAAA,CAASG,OAAO;IAC9C,OAAO;MACLH,QAAA,CAASG,OAAO,GAAGd,QAAA;IACrB;IAEAS,gBAAA,CAAiBE,QAAA,CAASG,OAAO;EACnC,GAAG,EAAE;EAEL,OAAO,CAACT,KAAA,EAAOU,QAAA,CAAS;AAC1B;AAEA;;;;;AAKA,MAAMX,eAAA,GAAmBa,eAAA,IAA6B;EACpD,MAAM,CAACd,YAAA,CAAa,GAAGL,KAAA,CAAMY,QAAQ,CAAU,MAAMO,eAAA,KAAoBC,SAAA;EAEzE,IAAIC,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzC;IACA;IACAvB,KAAA,CAAMe,SAAS,CAAC,MAAM;MACpB,IAAIV,YAAA,MAAkBc,eAAA,KAAoBC,SAAQ,GAAI;QACpD,MAAMI,KAAA,GAAQ,IAAIC,KAAA;QAElB,MAAMC,cAAA,GAAiBrB,YAAA,GACnB,0CACA,wCAAwC;QAE5C,MAAMsB,gBAAA,GAAmBtB,YAAA,GAAe,4BAA4B,wBAAwB;QAE5F;QACAuB,OAAA,CAAQJ,KAAK,CACX;QACE;QACA,6BAA6BE,cAAA,GAAiB,wCAC9C,mBAAmBC,gBAAA,GAAmB,oCACtC,sGACA,6DACAH,KAAA,CAAMK,KAAK,CACZ,CAACC,IAAI,CAAC;MAEX;IACF,GAAG,CAACzB,YAAA,EAAcc,eAAA,CAAgB;EACpC;EAEA,OAAOd,YAAA;AACT"}