{"version":3,"names":["React","useIsomorphicLayoutEffect","useEventCallback","fn","callbackRef","useRef","Error","current","useCallback","args","callback"],"sources":["../../src/hooks/useEventCallback.ts"],"sourcesContent":["import * as React from 'react';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\n\n/**\n * @internal\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * Modified `useCallback` that can be used when dependencies change too frequently. Can occur when\n * e.g. user props are dependencies which could change on every render\n * e.g. volatile values (i.e. useState/useDispatch) are dependencies which could change frequently\n *\n * This should not be used often, but can be a useful re-render optimization since the callback is a ref and\n * will not be invalidated between re-renders\n *\n * @param fn - The callback function that will be used\n */\nexport const useEventCallback = <Args extends unknown[], Return>(fn: (...args: Args) => Return) => {\n  const callbackRef = React.useRef<typeof fn>(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n\n  return React.useCallback(\n    (...args: Args) => {\n      const callback = callbackRef.current;\n      return callback(...args);\n    },\n    [callbackRef],\n  );\n};\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,yBAAyB,QAAQ;AAE1C;;;;;;;;;;;;;AAaA,OAAO,MAAMC,gBAAA,GAAoDC,EAAA,IAAkC;EACjG,MAAMC,WAAA,GAAcJ,KAAA,CAAMK,MAAM,CAAY,MAAM;IAChD,MAAM,IAAIC,KAAA,CAAM;EAClB;EAEAL,yBAAA,CAA0B,MAAM;IAC9BG,WAAA,CAAYG,OAAO,GAAGJ,EAAA;EACxB,GAAG,CAACA,EAAA,CAAG;EAEP,OAAOH,KAAA,CAAMQ,WAAW,CACtB,CAAC,GAAGC,IAAA,KAAe;IACjB,MAAMC,QAAA,GAAWN,WAAA,CAAYG,OAAO;IACpC,OAAOG,QAAA,IAAYD,IAAA;EACrB,GACA,CAACL,WAAA,CAAY;AAEjB"}