import * as React from 'react';
import { omit } from '../utils/omit';
/**
 * Given the state and an array of slot names, will break out `slots` and `slotProps`
 * collections.
 *
 * The root is derived from a mix of `components` props and `as` prop.
 *
 * Slots will render as null if they are rendered as primitives with undefined children.
 *
 * The slotProps will always omit the `as` prop within them, and for slots that are string
 * primitives, the props will be filtered according to the slot type by the type system.
 * For example, if the slot is rendered `as: 'a'`, the props will be filtered for acceptable
 * anchor props. Note that this is only enforced at build time by Typescript -- there is no
 * runtime code filtering props in this function.
 *
 * @param state - State including slot definitions
 * @returns An object containing the `slots` map and `slotProps` map.
 */
export function getSlots(state) {
  const slots = {};
  const slotProps = {};
  const slotNames = Object.keys(state.components);
  for (const slotName of slotNames) {
    const [slot, props] = getSlot(state, slotName);
    slots[slotName] = slot;
    slotProps[slotName] = props;
  }
  return {
    slots,
    slotProps: slotProps
  };
}
function getSlot(state, slotName) {
  var _state_components, _state_components1, _state_slotName;
  if (state[slotName] === undefined) {
    return [null, undefined];
  }
  const {
    children,
    as: asProp,
    ...rest
  } = state[slotName];
  const slot = ((_state_components = state.components) === null || _state_components === void 0 ? void 0 : _state_components[slotName]) === undefined || typeof state.components[slotName] === 'string' ? asProp || ((_state_components1 = state.components) === null || _state_components1 === void 0 ? void 0 : _state_components1[slotName]) || 'div' : state.components[slotName];
  if (typeof children === 'function') {
    const render = children;
    return [React.Fragment, {
      children: render(slot, rest)
    }];
  }
  const shouldOmitAsProp = typeof slot === 'string' && ((_state_slotName = state[slotName]) === null || _state_slotName === void 0 ? void 0 : _state_slotName.as);
  const slotProps = shouldOmitAsProp ? omit(state[slotName], ['as']) : state[slotName];
  return [slot, slotProps];
}
//# sourceMappingURL=getSlots.js.map