{"version":3,"names":["React","canUseDOM","defaultSSRContextValue","current","SSRContext","createContext","undefined","useSSRContext","_React_useContext","useContext","SSRProvider","props","value","useState","createElement","Provider","children","useIsSSR","isInSSRContext","isSSR","setIsSSR","process","env","NODE_ENV","console","error","join","useLayoutEffect"],"sources":["../../src/ssr/SSRContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport { canUseDOM } from './canUseDOM';\n\n/**\n * To support SSR, the auto incrementing id counter is stored in a context. This allows it to be reset on every request\n * to ensure the client and server are consistent.\n *\n * @internal\n */\nexport type SSRContextValue = {\n  current: number;\n};\n\n/**\n * Default context value to use in case there is no SSRProvider. This is fine for client-only apps.\n *\n * @internal\n */\nexport const defaultSSRContextValue: SSRContextValue = {\n  current: 0,\n};\n\nexport const SSRContext = React.createContext<SSRContextValue | undefined>(undefined) as React.Context<SSRContextValue>;\n\n/**\n * @internal\n */\nexport function useSSRContext(): SSRContextValue {\n  return React.useContext(SSRContext) ?? defaultSSRContextValue;\n}\n\n/**\n * When using SSR with Fluent UI, applications must be wrapped in an SSRProvider. This ensures that auto generated ids\n * are consistent between the client and server.\n *\n * @public\n */\nexport const SSRProvider: React.FC<{ children: React.ReactNode }> = props => {\n  const [value] = React.useState<SSRContextValue>(() => ({ current: 0 }));\n\n  return <SSRContext.Provider value={value}>{props.children}</SSRContext.Provider>;\n};\n\n/**\n * Returns whether the component is currently being server side rendered or hydrated on the client. Can be used to delay\n * browser-specific rendering until after hydration. May cause re-renders on a client when is used within SSRProvider.\n */\nexport function useIsSSR(): boolean {\n  const isInSSRContext = useSSRContext() !== defaultSSRContextValue;\n  const [isSSR, setIsSSR] = React.useState(isInSSRContext);\n\n  // If we are rendering in a non-DOM environment, and there's no SSRProvider, provide a warning to hint to the\n  // developer to add one.\n  if (process.env.NODE_ENV !== 'production') {\n    if (!isInSSRContext && !canUseDOM()) {\n      // eslint-disable-next-line no-console\n      console.error(\n        [\n          '@fluentui/react-components: ',\n          'When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are ' +\n            'generated between the client and server.',\n          '\\n',\n          '\\n',\n          'Check documentation at https://aka.ms/fluentui-ssr',\n        ].join(''),\n      );\n    }\n  }\n\n  // If on the client, and the component was initially server rendered, then schedule a layout effect to update the\n  // component after hydration.\n  if (canUseDOM() && isInSSRContext) {\n    // This if statement technically breaks the rules of hooks, but is safe because the condition never changes after\n    // mounting.\n    // eslint-disable-next-line\n    React.useLayoutEffect(() => {\n      setIsSSR(false);\n    }, []);\n  }\n\n  return isSSR;\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,SAAS,QAAQ;AAY1B;;;;;AAKA,OAAO,MAAMC,sBAAA,GAA0C;EACrDC,OAAA,EAAS;AACX;AAEA,OAAO,MAAMC,UAAA,gBAAaJ,KAAA,CAAMK,aAAa,CAA8BC,SAAA;AAE3E;;;AAGA,OAAO,SAASC,cAAA,EAAiC;MACxCC,iBAAA;EAAP,OAAO,CAAAA,iBAAA,GAAAR,KAAA,CAAMS,UAAU,CAACL,UAAA,eAAjBI,iBAAA,cAAAA,iBAAA,GAAgCN,sBAAsB;AAC/D;AAEA;;;;;;AAMA,OAAO,MAAMQ,WAAA,GAAuDC,KAAA,IAAS;EAC3E,MAAM,CAACC,KAAA,CAAM,GAAGZ,KAAA,CAAMa,QAAQ,CAAkB,OAAO;IAAEV,OAAA,EAAS;EAAE;EAEpE,oBAAOH,KAAA,CAAAc,aAAA,CAACV,UAAA,CAAWW,QAAQ;IAACH,KAAA,EAAOA;KAAQD,KAAA,CAAMK,QAAQ;AAC3D;AAEA;;;;AAIA,OAAO,SAASC,SAAA,EAAoB;EAClC,MAAMC,cAAA,GAAiBX,aAAA,OAAoBL,sBAAA;EAC3C,MAAM,CAACiB,KAAA,EAAOC,QAAA,CAAS,GAAGpB,KAAA,CAAMa,QAAQ,CAACK,cAAA;EAEzC;EACA;EACA,IAAIG,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK,cAAc;IACzC,IAAI,CAACL,cAAA,IAAkB,CAACjB,SAAA,IAAa;MACnC;MACAuB,OAAA,CAAQC,KAAK,CACX,CACE,gCACA,4GACE,4CACF,MACA,MACA,qDACD,CAACC,IAAI,CAAC;IAEX;EACF;EAEA;EACA;EACA,IAAIzB,SAAA,MAAeiB,cAAA,EAAgB;IACjC;IACA;IACA;IACAlB,KAAA,CAAM2B,eAAe,CAAC,MAAM;MAC1BP,QAAA,CAAS,KAAK;IAChB,GAAG,EAAE;EACP;EAEA,OAAOD,KAAA;AACT"}