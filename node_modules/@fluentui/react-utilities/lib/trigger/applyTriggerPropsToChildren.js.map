{"version":3,"names":["React","isFluentTrigger","applyTriggerPropsToChildren","children","triggerChildProps","cloneTriggerTree","child","triggerProps","isValidElement","type","Fragment","Error","grandchild","props","cloneElement","undefined"],"sources":["../../src/trigger/applyTriggerPropsToChildren.ts"],"sourcesContent":["import * as React from 'react';\nimport { isFluentTrigger } from './isFluentTrigger';\nimport type { TriggerProps } from './types';\n\n/**\n * @internal\n * resolve the trigger props to the children, either by calling the render function, or cloning with the new props.\n */\nexport function applyTriggerPropsToChildren<TriggerChildProps>(\n  children: TriggerProps<TriggerChildProps>['children'],\n  triggerChildProps: TriggerChildProps,\n): React.ReactElement | null {\n  if (typeof children === 'function') {\n    return children(triggerChildProps);\n  } else if (children) {\n    return cloneTriggerTree(children, triggerChildProps);\n  }\n\n  // Components in React should return either JSX elements or \"null\", otherwise React will throw:\n  //   Nothing was returned from render.\n  //   This usually means a return statement is missing. Or, to render nothing, return null.\n  return children || null;\n}\n\n/**\n * Clones a React element tree, and applies the given props to the first grandchild that is not\n * a FluentTriggerComponent or React Fragment (the same element returned by {@link getTriggerChild}).\n */\nfunction cloneTriggerTree<TriggerChildProps>(\n  child: React.ReactNode,\n  triggerProps: TriggerChildProps,\n): React.ReactElement {\n  if (!React.isValidElement(child) || child.type === React.Fragment) {\n    throw new Error(\n      'A trigger element must be a single element for this component. ' +\n        \"Please ensure that you're not using React Fragments.\",\n    );\n  }\n\n  if (isFluentTrigger(child)) {\n    const grandchild = cloneTriggerTree(child.props.children, triggerProps);\n    return React.cloneElement(child, undefined, grandchild);\n  } else {\n    return React.cloneElement(child, triggerProps as TriggerChildProps & React.Attributes);\n  }\n}\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,eAAe,QAAQ;AAGhC;;;;AAIA,OAAO,SAASC,4BACdC,QAAqD,EACrDC,iBAAoC,EACT;EAC3B,IAAI,OAAOD,QAAA,KAAa,YAAY;IAClC,OAAOA,QAAA,CAASC,iBAAA;EAClB,OAAO,IAAID,QAAA,EAAU;IACnB,OAAOE,gBAAA,CAAiBF,QAAA,EAAUC,iBAAA;EACpC;EAEA;EACA;EACA;EACA,OAAOD,QAAA,IAAY,IAAI;AACzB;AAEA;;;;AAIA,SAASE,iBACPC,KAAsB,EACtBC,YAA+B,EACX;EACpB,IAAI,eAACP,KAAA,CAAMQ,cAAc,CAACF,KAAA,KAAUA,KAAA,CAAMG,IAAI,KAAKT,KAAA,CAAMU,QAAQ,EAAE;IACjE,MAAM,IAAIC,KAAA,CACR,oEACE;EAEN;EAEA,IAAIV,eAAA,CAAgBK,KAAA,GAAQ;IAC1B,MAAMM,UAAA,GAAaP,gBAAA,CAAiBC,KAAA,CAAMO,KAAK,CAACV,QAAQ,EAAEI,YAAA;IAC1D,oBAAOP,KAAA,CAAMc,YAAY,CAACR,KAAA,EAAOS,SAAA,EAAWH,UAAA;EAC9C,OAAO;IACL,oBAAOZ,KAAA,CAAMc,YAAY,CAACR,KAAA,EAAOC,YAAA;EACnC;AACF"}