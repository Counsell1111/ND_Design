{"version":3,"names":["debounce","createPriorityQueue","createOverflowManager","container","overflowMenu","observing","forceDispatch","options","padding","overflowAxis","overflowDirection","minimumVisible","onUpdateItemVisibility","undefined","onUpdateOverflow","overflowItems","overflowGroups","resizeObserver","ResizeObserver","entries","update","invisibleItemQueue","a","b","itemA","itemB","priority","positionStatusBit","Node","DOCUMENT_POSITION_FOLLOWING","DOCUMENT_POSITION_PRECEDING","element","compareDocumentPosition","visibleItemQueue","getOffsetSize","el","offsetWidth","offsetHeight","makeItemVisible","nextVisible","dequeue","enqueue","item","visible","groupId","invisibleItemIds","delete","id","visibleItemIds","add","makeItemInvisible","nextInvisible","width","dispatchOverflowUpdate","all","visibleItems","map","itemId","invisibleItems","groupVisibility","Object","forEach","groupState","size","processOverflowItems","availableSize","overflowMenuOffset","visibleTop","peek","invisibleTop","currentWidth","reduce","sum","visibleItemId","child","forceUpdate","observe","observedContainer","userOptions","assign","values","disconnect","addItem","Set","addOverflowMenu","removeOverflowMenu","removeItem","remove"],"sources":["../src/overflowManager.ts"],"sourcesContent":["import { debounce } from './debounce';\nimport { createPriorityQueue } from './priorityQueue';\nimport type { OverflowGroupState, OverflowItemEntry, OverflowManager, ObserveOptions } from './types';\n\n/**\n * @internal\n * @returns overflow manager instance\n */\nexport function createOverflowManager(): OverflowManager {\n  let container: HTMLElement | undefined;\n  let overflowMenu: HTMLElement | undefined;\n  // Set as true when resize observer is observing\n  let observing = false;\n  // If true, next update will dispatch to onUpdateOverflow even if queue top states don't change\n  let forceDispatch = false;\n  const options: Required<ObserveOptions> = {\n    padding: 10,\n    overflowAxis: 'horizontal',\n    overflowDirection: 'end',\n    minimumVisible: 0,\n    onUpdateItemVisibility: () => undefined,\n    onUpdateOverflow: () => undefined,\n  };\n\n  const overflowItems: Record<string, OverflowItemEntry> = {};\n  const overflowGroups: Record<string, { visibleItemIds: Set<string>; invisibleItemIds: Set<string> }> = {};\n  const resizeObserver = new ResizeObserver(entries => {\n    if (!entries[0] || !container) {\n      return;\n    }\n\n    update();\n  });\n\n  const invisibleItemQueue = createPriorityQueue<string>((a, b) => {\n    const itemA = overflowItems[a];\n    const itemB = overflowItems[b];\n    // Higher priority at the top of the queue\n    const priority = itemB.priority - itemA.priority;\n    if (priority !== 0) {\n      return priority;\n    }\n\n    const positionStatusBit =\n      options.overflowDirection === 'end' ? Node.DOCUMENT_POSITION_FOLLOWING : Node.DOCUMENT_POSITION_PRECEDING;\n\n    // equal priority, use DOM order\n    // eslint-disable-next-line no-bitwise\n    return itemA.element.compareDocumentPosition(itemB.element) & positionStatusBit ? -1 : 1;\n  });\n\n  const visibleItemQueue = createPriorityQueue<string>((a, b) => {\n    const itemA = overflowItems[a];\n    const itemB = overflowItems[b];\n    // Lower priority at the top of the queue\n    const priority = itemA.priority - itemB.priority;\n\n    if (priority !== 0) {\n      return priority;\n    }\n\n    const positionStatusBit =\n      options.overflowDirection === 'end' ? Node.DOCUMENT_POSITION_PRECEDING : Node.DOCUMENT_POSITION_FOLLOWING;\n\n    // equal priority, use DOM order\n    // eslint-disable-next-line no-bitwise\n    return itemA.element.compareDocumentPosition(itemB.element) & positionStatusBit ? -1 : 1;\n  });\n\n  const getOffsetSize = (el: HTMLElement) => {\n    return options.overflowAxis === 'horizontal' ? el.offsetWidth : el.offsetHeight;\n  };\n\n  const makeItemVisible = () => {\n    const nextVisible = invisibleItemQueue.dequeue();\n    visibleItemQueue.enqueue(nextVisible);\n\n    const item = overflowItems[nextVisible];\n    options.onUpdateItemVisibility({ item, visible: true });\n    if (item.groupId) {\n      overflowGroups[item.groupId].invisibleItemIds.delete(item.id);\n      overflowGroups[item.groupId].visibleItemIds.add(item.id);\n    }\n\n    return getOffsetSize(item.element);\n  };\n\n  const makeItemInvisible = () => {\n    const nextInvisible = visibleItemQueue.dequeue();\n    invisibleItemQueue.enqueue(nextInvisible);\n\n    const item = overflowItems[nextInvisible];\n    const width = getOffsetSize(item.element);\n    options.onUpdateItemVisibility({ item, visible: false });\n    if (item.groupId) {\n      overflowGroups[item.groupId].visibleItemIds.delete(item.id);\n      overflowGroups[item.groupId].invisibleItemIds.add(item.id);\n    }\n\n    return width;\n  };\n\n  const dispatchOverflowUpdate = () => {\n    const visibleItemIds = visibleItemQueue.all();\n    const invisibleItemIds = invisibleItemQueue.all();\n\n    const visibleItems = visibleItemIds.map(itemId => overflowItems[itemId]);\n    const invisibleItems = invisibleItemIds.map(itemId => overflowItems[itemId]);\n\n    const groupVisibility: Record<string, OverflowGroupState> = {};\n    Object.entries(overflowGroups).forEach(([groupId, groupState]) => {\n      if (groupState.invisibleItemIds.size && groupState.visibleItemIds.size) {\n        groupVisibility[groupId] = 'overflow';\n      } else if (groupState.visibleItemIds.size === 0) {\n        groupVisibility[groupId] = 'hidden';\n      } else {\n        groupVisibility[groupId] = 'visible';\n      }\n    });\n\n    options.onUpdateOverflow({ visibleItems, invisibleItems, groupVisibility });\n  };\n\n  const processOverflowItems = (): boolean => {\n    if (!container) {\n      return false;\n    }\n\n    const availableSize = getOffsetSize(container) - options.padding;\n    const overflowMenuOffset = overflowMenu ? getOffsetSize(overflowMenu) : 0;\n\n    // Snapshot of the visible/invisible state to compare for updates\n    const visibleTop = visibleItemQueue.peek();\n    const invisibleTop = invisibleItemQueue.peek();\n\n    const visibleItemIds = visibleItemQueue.all();\n    let currentWidth = visibleItemIds.reduce((sum, visibleItemId) => {\n      const child = overflowItems[visibleItemId].element;\n      return sum + getOffsetSize(child);\n    }, 0);\n\n    // Add items until available width is filled - can result in overflow\n    while (currentWidth < availableSize && invisibleItemQueue.size() > 0) {\n      currentWidth += makeItemVisible();\n    }\n\n    // Remove items until there's no more overflow\n    while (currentWidth > availableSize && visibleItemQueue.size() > 0) {\n      if (visibleItemQueue.size() <= options.minimumVisible) {\n        break;\n      }\n      currentWidth -= makeItemInvisible();\n    }\n\n    // make sure the overflow menu can fit\n    if (\n      visibleItemQueue.size() > options.minimumVisible &&\n      invisibleItemQueue.size() > 0 &&\n      currentWidth + overflowMenuOffset > availableSize\n    ) {\n      makeItemInvisible();\n    }\n\n    // only update when the state of visible/invisible items has changed\n    if (visibleItemQueue.peek() !== visibleTop || invisibleItemQueue.peek() !== invisibleTop) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const forceUpdate: OverflowManager['forceUpdate'] = () => {\n    if (processOverflowItems() || forceDispatch) {\n      forceDispatch = false;\n      dispatchOverflowUpdate();\n    }\n  };\n\n  const update: OverflowManager['update'] = debounce(forceUpdate);\n\n  const observe: OverflowManager['observe'] = (observedContainer, userOptions) => {\n    Object.assign(options, userOptions);\n    observing = true;\n    Object.values(overflowItems).forEach(item => visibleItemQueue.enqueue(item.id));\n\n    container = observedContainer;\n    resizeObserver.observe(container);\n  };\n\n  const disconnect: OverflowManager['disconnect'] = () => {\n    observing = false;\n    resizeObserver.disconnect();\n  };\n\n  const addItem: OverflowManager['addItem'] = item => {\n    if (overflowItems[item.id]) {\n      return;\n    }\n\n    overflowItems[item.id] = item;\n\n    // some options can affect priority which are only set on `observe`\n    if (observing) {\n      // Updates to elements might not change the queue tops\n      // i.e. new element is enqueued but the top of the queue stays the same\n      // force a dispatch on the next batched update\n      forceDispatch = true;\n      visibleItemQueue.enqueue(item.id);\n    }\n\n    if (item.groupId) {\n      if (!overflowGroups[item.groupId]) {\n        overflowGroups[item.groupId] = {\n          visibleItemIds: new Set<string>(),\n          invisibleItemIds: new Set<string>(),\n        };\n      }\n\n      overflowGroups[item.groupId].visibleItemIds.add(item.id);\n    }\n\n    update();\n  };\n\n  const addOverflowMenu: OverflowManager['addOverflowMenu'] = el => {\n    overflowMenu = el;\n  };\n\n  const removeOverflowMenu: OverflowManager['removeOverflowMenu'] = () => {\n    overflowMenu = undefined;\n  };\n\n  const removeItem: OverflowManager['removeItem'] = itemId => {\n    if (!overflowItems[itemId]) {\n      return;\n    }\n\n    const item = overflowItems[itemId];\n    visibleItemQueue.remove(itemId);\n    invisibleItemQueue.remove(itemId);\n\n    if (item.groupId) {\n      overflowGroups[item.groupId].visibleItemIds.delete(item.id);\n      overflowGroups[item.groupId].invisibleItemIds.delete(item.id);\n    }\n\n    delete overflowItems[itemId];\n    update();\n  };\n\n  return {\n    addItem,\n    disconnect,\n    forceUpdate,\n    observe,\n    removeItem,\n    update,\n    addOverflowMenu,\n    removeOverflowMenu,\n  };\n}\n"],"mappings":"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"}