{"version":3,"names":["React","Avatar","Button","CheckmarkCircleFilled","DismissCircleFilled","InfoFilled","WarningFilled","getNativeElementProps","resolveShorthand","useAlert_unstable","props","ref","appearance","intent","defaultIcon","defaultRole","createElement","action","defaultProps","avatar","icon","children","required","components","root","role"],"sources":["../../../src/components/Alert/useAlert.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Avatar } from '@fluentui/react-avatar';\nimport { Button } from '@fluentui/react-button';\nimport { CheckmarkCircleFilled, DismissCircleFilled, InfoFilled, WarningFilled } from '@fluentui/react-icons';\nimport { getNativeElementProps, resolveShorthand } from '@fluentui/react-utilities';\n\nimport type { AlertProps, AlertState } from './Alert.types';\n\n/**\n * Create the state required to render Alert.\n *\n * The returned state can be modified with hooks such as useAlertStyles_unstable,\n * before being passed to renderAlert_unstable.\n *\n * @param props - props from this instance of Alert\n * @param ref - reference to root HTMLElement of Alert\n */\nexport const useAlert_unstable = (props: AlertProps, ref: React.Ref<HTMLElement>): AlertState => {\n  const { appearance = 'primary', intent } = props;\n\n  /** Determine the role and icon to render based on the intent */\n  let defaultIcon;\n  let defaultRole = 'status';\n  switch (intent) {\n    case 'success':\n      defaultIcon = <CheckmarkCircleFilled />;\n      break;\n    case 'error':\n      defaultIcon = <DismissCircleFilled />;\n      defaultRole = 'alert';\n      break;\n    case 'warning':\n      defaultIcon = <WarningFilled />;\n      defaultRole = 'alert';\n      break;\n    case 'info':\n      defaultIcon = <InfoFilled />;\n      break;\n  }\n\n  const action = resolveShorthand(props.action, { defaultProps: { appearance: 'transparent' } });\n  const avatar = resolveShorthand(props.avatar);\n  let icon;\n  /** Avatar prop takes precedence over the icon or intent prop */\n  if (!avatar) {\n    icon = resolveShorthand(props.icon, {\n      defaultProps: {\n        children: defaultIcon,\n      },\n      required: !!props.intent,\n    });\n  }\n\n  return {\n    action,\n    appearance,\n    avatar,\n    components: {\n      root: 'div',\n      icon: 'span',\n      action: Button,\n      avatar: Avatar,\n    },\n    icon,\n    intent,\n    root: getNativeElementProps('div', {\n      ref,\n      role: defaultRole,\n      children: props.children,\n      ...props,\n    }),\n  };\n};\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AAEvB,SAASC,MAAM,QAAQ;AACvB,SAASC,MAAM,QAAQ;AACvB,SAASC,qBAAqB,EAAEC,mBAAmB,EAAEC,UAAU,EAAEC,aAAa,QAAQ;AACtF,SAASC,qBAAqB,EAAEC,gBAAgB,QAAQ;AAIxD;;;;;;;;;AASA,OAAO,MAAMC,iBAAA,GAAoBA,CAACC,KAAA,EAAmBC,GAAA,KAA4C;EAC/F,MAAM;IAAEC,UAAA,GAAa;IAAWC;EAAM,CAAE,GAAGH,KAAA;EAE3C;EACA,IAAII,WAAA;EACJ,IAAIC,WAAA,GAAc;EAClB,QAAQF,MAAA;IACN,KAAK;MACHC,WAAA,gBAAcd,KAAA,CAAAgB,aAAA,CAACb,qBAAA;MACf;IACF,KAAK;MACHW,WAAA,gBAAcd,KAAA,CAAAgB,aAAA,CAACZ,mBAAA;MACfW,WAAA,GAAc;MACd;IACF,KAAK;MACHD,WAAA,gBAAcd,KAAA,CAAAgB,aAAA,CAACV,aAAA;MACfS,WAAA,GAAc;MACd;IACF,KAAK;MACHD,WAAA,gBAAcd,KAAA,CAAAgB,aAAA,CAACX,UAAA;MACf;EAAM;EAGV,MAAMY,MAAA,GAAST,gBAAA,CAAiBE,KAAA,CAAMO,MAAM,EAAE;IAAEC,YAAA,EAAc;MAAEN,UAAA,EAAY;IAAc;EAAE;EAC5F,MAAMO,MAAA,GAASX,gBAAA,CAAiBE,KAAA,CAAMS,MAAM;EAC5C,IAAIC,IAAA;EACJ;EACA,IAAI,CAACD,MAAA,EAAQ;IACXC,IAAA,GAAOZ,gBAAA,CAAiBE,KAAA,CAAMU,IAAI,EAAE;MAClCF,YAAA,EAAc;QACZG,QAAA,EAAUP;MACZ;MACAQ,QAAA,EAAU,CAAC,CAACZ,KAAA,CAAMG;IACpB;EACF;EAEA,OAAO;IACLI,MAAA;IACAL,UAAA;IACAO,MAAA;IACAI,UAAA,EAAY;MACVC,IAAA,EAAM;MACNJ,IAAA,EAAM;MACNH,MAAA,EAAQf,MAAA;MACRiB,MAAA,EAAQlB;IACV;IACAmB,IAAA;IACAP,MAAA;IACAW,IAAA,EAAMjB,qBAAA,CAAsB,OAAO;MACjCI,GAAA;MACAc,IAAA,EAAMV,WAAA;MACNM,QAAA,EAAUX,KAAA,CAAMW,QAAQ;MACxB,GAAGX;IACL;EACF;AACF"}